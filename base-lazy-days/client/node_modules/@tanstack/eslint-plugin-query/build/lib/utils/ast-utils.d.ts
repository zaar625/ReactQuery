import type { TSESLint, TSESTree } from '@typescript-eslint/utils';
import type TSESLintScopeManager from '@typescript-eslint/scope-manager';
import { AST_NODE_TYPES } from '@typescript-eslint/utils';
import type { RuleContext } from '@typescript-eslint/utils/dist/ts-eslint';
export declare const ASTUtils: {
    isNodeOfOneOf<T extends TSESTree.AST_NODE_TYPES>(node: TSESTree.Node, types: readonly T[]): node is TSESTree.Node & {
        type: T;
    };
    isIdentifier(node: TSESTree.Node): node is TSESTree.Identifier;
    isIdentifierWithName(node: TSESTree.Node, name: string): node is TSESTree.Identifier;
    isIdentifierWithOneOfNames<T_1 extends string[]>(node: TSESTree.Node, name: T_1): node is TSESTree.Identifier & {
        name: T_1[number];
    };
    isProperty(node: TSESTree.Node): node is TSESTree.Property;
    isObjectExpression(node: TSESTree.Node): node is TSESTree.ObjectExpression;
    isPropertyWithIdentifierKey(node: TSESTree.Node, key: string): node is TSESTree.Property;
    findPropertyWithIdentifierKey(properties: TSESTree.ObjectLiteralElement[], key: string): TSESTree.Property | undefined;
    getNestedIdentifiers(node: TSESTree.Node): TSESTree.Identifier[];
    isAncestorIsCallee(identifier: TSESTree.Node): boolean;
    traverseUpOnly(identifier: TSESTree.Node, allowedNodeTypes: AST_NODE_TYPES[]): TSESTree.Node;
    isDeclaredInNode(params: {
        functionNode: TSESTree.Node;
        reference: TSESLintScopeManager.Reference;
        scopeManager: TSESLint.Scope.ScopeManager;
    }): boolean;
    getExternalRefs(params: {
        scopeManager: TSESLint.Scope.ScopeManager;
        sourceCode: Readonly<TSESLint.SourceCode>;
        node: TSESTree.Node;
    }): TSESLint.Scope.Reference[];
    mapKeyNodeToText(node: TSESTree.Node, sourceCode: Readonly<TSESLint.SourceCode>): string;
    isValidReactComponentOrHookName(identifier: TSESTree.Identifier | null): boolean;
    getFunctionAncestor(context: Readonly<RuleContext<string, readonly unknown[]>>): TSESTree.Node | undefined;
    getReferencedExpressionByIdentifier(params: {
        node: TSESTree.Node;
        context: Readonly<RuleContext<string, readonly unknown[]>>;
    }): TSESTree.Expression | null;
    getNestedReturnStatements(node: TSESTree.Node): TSESTree.ReturnStatement[];
};
//# sourceMappingURL=ast-utils.d.ts.map