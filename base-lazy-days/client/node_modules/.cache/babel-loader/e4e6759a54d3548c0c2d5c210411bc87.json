{"ast":null,"code":"import { scheduleMicrotask } from './utils.esm.js';\nfunction createNotifyManager() {\n  let queue = [];\n  let transactions = 0;\n  let notifyFn = callback => {\n    callback();\n  };\n  let batchNotifyFn = callback => {\n    callback();\n  };\n  const batch = callback => {\n    let result;\n    transactions++;\n    try {\n      result = callback();\n    } finally {\n      transactions--;\n      if (!transactions) {\n        flush();\n      }\n    }\n    return result;\n  };\n  const schedule = callback => {\n    if (transactions) {\n      queue.push(callback);\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback);\n      });\n    }\n  };\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n\n  const batchCalls = callback => {\n    return function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      schedule(() => {\n        callback(...args);\n      });\n    };\n  };\n  const flush = () => {\n    const originalQueue = queue;\n    queue = [];\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach(callback => {\n            notifyFn(callback);\n          });\n        });\n      });\n    }\n  };\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n\n  const setNotifyFunction = fn => {\n    notifyFn = fn;\n  };\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n\n  const setBatchNotifyFunction = fn => {\n    batchNotifyFn = fn;\n  };\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction\n  };\n} // SINGLETON\n\nconst notifyManager = createNotifyManager();\nexport { createNotifyManager, notifyManager };","map":{"version":3,"sources":["../../src/notifyManager.ts"],"names":["createNotifyManager","queue","transactions","notifyFn","callback","batchNotifyFn","batch","result","flush","schedule","push","scheduleMicrotask","batchCalls","args","originalQueue","length","forEach","setNotifyFunction","fn","setBatchNotifyFunction","notifyManager"],"mappings":";AAUO,SAASA,mBAAT,CAAA,EAA+B;EACpC,IAAIC,KAAuB,GAAG,EAA9B;EACA,IAAIC,YAAY,GAAG,CAAnB;EACA,IAAIC,QAAwB,GAAIC,QAAD,IAAc;IAC3CA,QAAQ,CAAA,CAAA;GADV;EAGA,IAAIC,aAAkC,GAAID,QAAD,IAA0B;IACjEA,QAAQ,CAAA,CAAA;GADV;EAIA,MAAME,KAAK,GAAOF,QAAJ,IAA6B;IACzC,IAAIG,MAAJ;IACAL,YAAY,EAAA;IACZ,IAAI;MACFK,MAAM,GAAGH,QAAQ,CAAA,CAAjBG;IACD,CAFD,SAEU;MACRL,YAAY,EAAA;MACZ,IAAI,CAACA,YAAL,EAAmB;QACjBM,KAAK,CAAA,CAAA;MACN;IACF;IACD,OAAOD,MAAP;GAXF;EAcA,MAAME,QAAQ,GAAIL,QAAD,IAAoC;IACnD,IAAIF,YAAJ,EAAkB;MAChBD,KAAK,CAACS,IAANT,CAAWG,QAAXH,CAAAA;IACD,CAFD,MAEO;MACLU,iBAAiB,CAAC,MAAM;QACtBR,QAAQ,CAACC,QAAD,CAARD;MACD,CAFgB,CAAjBQ;IAGD;GAPH;EAUA;AACF;AACA;;EACE,MAAMC,UAAU,GAAwBR,QAArB,IAAwC;IACzD,OAAQ,YAAoB;MAAA,SAAA,IAAA,GAAA,SAAA,CAAA,MAAA,EAAhBS,IAAJ,OAAA,KAAA,CAAA,IAAA,GAAA,IAAA,MAAA,IAAA,GAAA,IAAA,EAAA,IAAA;QAAIA,IAAJ,CAAA,IAAA,IAAA,SAAA,CAAA,IAAA;MAAA;MACNJ,QAAQ,CAAC,MAAM;QACbL,QAAQ,CAAC,GAAGS,IAAJ,CAART;MACD,CAFO,CAARK;KADF;GADF;EAQA,MAAMD,KAAK,GAAG,CAAA,KAAY;IACxB,MAAMM,aAAa,GAAGb,KAAtB;IACAA,KAAK,GAAG,EAARA;IACA,IAAIa,aAAa,CAACC,MAAlB,EAA0B;MACxBJ,iBAAiB,CAAC,MAAM;QACtBN,aAAa,CAAC,MAAM;UAClBS,aAAa,CAACE,OAAdF,CAAuBV,QAAD,IAAc;YAClCD,QAAQ,CAACC,QAAD,CAARD;WADFW,CAAAA;QAGD,CAJY,CAAbT;MAKD,CANgB,CAAjBM;IAOD;GAXH;EAcA;AACF;AACA;AACA;;EACE,MAAMM,iBAAiB,GAAIC,EAAD,IAAwB;IAChDf,QAAQ,GAAGe,EAAXf;GADF;EAIA;AACF;AACA;AACA;;EACE,MAAMgB,sBAAsB,GAAID,EAAD,IAA6B;IAC1Db,aAAa,GAAGa,EAAhBb;GADF;EAIA,OAAO;IACLC,KADK;IAELM,UAFK;IAGLH,QAHK;IAILQ,iBAJK;IAKLE;GALF;AAOD,CAAA,CAAA;;AAGYC,MAAAA,aAAa,GAAGpB,mBAAmB,CAAA,CAAA","sourcesContent":["import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\nexport function createNotifyManager() {\n  let queue: NotifyCallback[] = []\n  let transactions = 0\n  let notifyFn: NotifyFunction = (callback) => {\n    callback()\n  }\n  let batchNotifyFn: BatchNotifyFunction = (callback: () => void) => {\n    callback()\n  }\n\n  const batch = <T>(callback: () => T): T => {\n    let result\n    transactions++\n    try {\n      result = callback()\n    } finally {\n      transactions--\n      if (!transactions) {\n        flush()\n      }\n    }\n    return result\n  }\n\n  const schedule = (callback: NotifyCallback): void => {\n    if (transactions) {\n      queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  const batchCalls = <T extends Function>(callback: T): T => {\n    return ((...args: any[]) => {\n      schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  const flush = (): void => {\n    const originalQueue = queue\n    queue = []\n    if (originalQueue.length) {\n      scheduleMicrotask(() => {\n        batchNotifyFn(() => {\n          originalQueue.forEach((callback) => {\n            notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  const setNotifyFunction = (fn: NotifyFunction) => {\n    notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  const setBatchNotifyFunction = (fn: BatchNotifyFunction) => {\n    batchNotifyFn = fn\n  }\n\n  return {\n    batch,\n    batchCalls,\n    schedule,\n    setNotifyFunction,\n    setBatchNotifyFunction,\n  } as const\n}\n\n// SINGLETON\nexport const notifyManager = createNotifyManager()\n"]},"metadata":{},"sourceType":"module"}