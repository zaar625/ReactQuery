{"ast":null,"code":"'use client';\n\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.esm.js';\nimport * as React from 'react';\nimport { useMemo } from 'react';\nimport { useQueryClient, onlineManager, notifyManager } from '@tanstack/react-query';\nimport { rankItem } from '@tanstack/match-sorter-utils';\nimport useLocalStorage from './useLocalStorage.esm.js';\nimport { defaultPanelSize, useIsMounted, getSidedProp, getSidePanelStyle, sortFns, getResizeHandleStyle, displayValue, getQueryStatusColor, getQueryStatusLabel, isVerticalSide, minPanelSize } from './utils.esm.js';\nimport { Panel, Select, Input, Button, ActiveQueryPanel, Code, QueryKeys, QueryKey } from './styledComponents.esm.js';\nimport ScreenReader from './screenreader.esm.js';\nimport { defaultTheme, ThemeProvider } from './theme.esm.js';\nimport Explorer from './Explorer.esm.js';\nimport Logo from './Logo.esm.js';\nimport { useSyncExternalStore } from 'use-sync-external-store/shim/index.js';\nfunction ReactQueryDevtools(_ref) {\n  let {\n    initialIsOpen,\n    panelProps = {},\n    closeButtonProps = {},\n    toggleButtonProps = {},\n    position = 'bottom-left',\n    containerElement: Container = 'aside',\n    context,\n    styleNonce,\n    panelPosition: initialPanelPosition = 'bottom',\n    errorTypes = []\n  } = _ref;\n  const rootRef = React.useRef(null);\n  const panelRef = React.useRef(null);\n  const [isOpen, setIsOpen] = useLocalStorage('reactQueryDevtoolsOpen', initialIsOpen);\n  const [devtoolsHeight, setDevtoolsHeight] = useLocalStorage('reactQueryDevtoolsHeight', defaultPanelSize);\n  const [devtoolsWidth, setDevtoolsWidth] = useLocalStorage('reactQueryDevtoolsWidth', defaultPanelSize);\n  const [panelPosition = 'bottom', setPanelPosition] = useLocalStorage('reactQueryDevtoolsPanelPosition', initialPanelPosition);\n  const [isResolvedOpen, setIsResolvedOpen] = React.useState(false);\n  const [isResizing, setIsResizing] = React.useState(false);\n  const isMounted = useIsMounted();\n  const handleDragStart = (panelElement, startEvent) => {\n    if (!panelElement) return;\n    if (startEvent.button !== 0) return; // Only allow left click for drag\n\n    const isVertical = isVerticalSide(panelPosition);\n    setIsResizing(true);\n    const {\n      height,\n      width\n    } = panelElement.getBoundingClientRect();\n    const startX = startEvent.clientX;\n    const startY = startEvent.clientY;\n    let newSize = 0;\n    const run = moveEvent => {\n      // prevent mouse selecting stuff with mouse drag\n      moveEvent.preventDefault(); // calculate the correct size based on mouse position and current panel position\n      // hint: it is different formula for the opposite sides\n\n      if (isVertical) {\n        newSize = width + (panelPosition === 'right' ? startX - moveEvent.clientX : moveEvent.clientX - startX);\n        setDevtoolsWidth(newSize);\n      } else {\n        newSize = height + (panelPosition === 'bottom' ? startY - moveEvent.clientY : moveEvent.clientY - startY);\n        setDevtoolsHeight(newSize);\n      }\n      if (newSize < minPanelSize) {\n        setIsOpen(false);\n      } else {\n        setIsOpen(true);\n      }\n    };\n    const unsub = () => {\n      if (isResizing) {\n        setIsResizing(false);\n      }\n      document.removeEventListener('mousemove', run, false);\n      document.removeEventListener('mouseUp', unsub, false);\n    };\n    document.addEventListener('mousemove', run, false);\n    document.addEventListener('mouseup', unsub, false);\n  };\n  React.useEffect(() => {\n    setIsResolvedOpen(isOpen != null ? isOpen : false);\n  }, [isOpen, isResolvedOpen, setIsResolvedOpen]); // Toggle panel visibility before/after transition (depending on direction).\n  // Prevents focusing in a closed panel.\n\n  React.useEffect(() => {\n    const ref = panelRef.current;\n    if (ref) {\n      const handlePanelTransitionStart = () => {\n        if (isResolvedOpen) {\n          ref.style.visibility = 'visible';\n        }\n      };\n      const handlePanelTransitionEnd = () => {\n        if (!isResolvedOpen) {\n          ref.style.visibility = 'hidden';\n        }\n      };\n      ref.addEventListener('transitionstart', handlePanelTransitionStart);\n      ref.addEventListener('transitionend', handlePanelTransitionEnd);\n      return () => {\n        ref.removeEventListener('transitionstart', handlePanelTransitionStart);\n        ref.removeEventListener('transitionend', handlePanelTransitionEnd);\n      };\n    }\n    return;\n  }, [isResolvedOpen]);\n  React.useEffect(() => {\n    var _rootRef$current;\n    if (isResolvedOpen && (_rootRef$current = rootRef.current) != null && _rootRef$current.parentElement) {\n      const {\n        parentElement\n      } = rootRef.current;\n      const styleProp = getSidedProp('padding', panelPosition);\n      const isVertical = isVerticalSide(panelPosition);\n      const previousPaddings = (_ref2 => {\n        let {\n          padding,\n          paddingTop,\n          paddingBottom,\n          paddingLeft,\n          paddingRight\n        } = _ref2;\n        return {\n          padding,\n          paddingTop,\n          paddingBottom,\n          paddingLeft,\n          paddingRight\n        };\n      })(parentElement.style);\n      const run = () => {\n        // reset the padding\n        parentElement.style.padding = '0px';\n        parentElement.style.paddingTop = '0px';\n        parentElement.style.paddingBottom = '0px';\n        parentElement.style.paddingLeft = '0px';\n        parentElement.style.paddingRight = '0px'; // set the new padding based on the new panel position\n\n        parentElement.style[styleProp] = (isVertical ? devtoolsWidth : devtoolsHeight) + \"px\";\n      };\n      run();\n      if (typeof window !== 'undefined') {\n        window.addEventListener('resize', run);\n        return () => {\n          window.removeEventListener('resize', run);\n          Object.entries(previousPaddings).forEach(_ref3 => {\n            let [property, previousValue] = _ref3;\n            parentElement.style[property] = previousValue;\n          });\n        };\n      }\n    }\n    return;\n  }, [isResolvedOpen, panelPosition, devtoolsHeight, devtoolsWidth]);\n  const {\n    style: panelStyle = {},\n    ...otherPanelProps\n  } = panelProps;\n  const {\n    style: toggleButtonStyle = {},\n    onClick: onToggleClick,\n    ...otherToggleButtonProps\n  } = toggleButtonProps; // get computed style based on panel position\n\n  const style = getSidePanelStyle({\n    position: panelPosition,\n    devtoolsTheme: defaultTheme,\n    isOpen: isResolvedOpen,\n    height: devtoolsHeight,\n    width: devtoolsWidth,\n    isResizing,\n    panelStyle\n  }); // Do not render on the server\n\n  if (!isMounted()) return null;\n  return /*#__PURE__*/React.createElement(Container, {\n    ref: rootRef,\n    className: \"ReactQueryDevtools\",\n    \"aria-label\": \"React Query Devtools\"\n  }, /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: defaultTheme\n  }, /*#__PURE__*/React.createElement(ReactQueryDevtoolsPanel, _extends({\n    ref: panelRef,\n    context: context,\n    styleNonce: styleNonce,\n    position: panelPosition,\n    onPositionChange: setPanelPosition,\n    showCloseButton: true,\n    closeButtonProps: closeButtonProps\n  }, otherPanelProps, {\n    style: style,\n    isOpen: isResolvedOpen,\n    setIsOpen: setIsOpen,\n    onDragStart: e => handleDragStart(panelRef.current, e),\n    errorTypes: errorTypes\n  }))), !isResolvedOpen ? /*#__PURE__*/React.createElement(\"button\", _extends({\n    type: \"button\"\n  }, otherToggleButtonProps, {\n    \"aria-label\": \"Open React Query Devtools\",\n    \"aria-controls\": \"ReactQueryDevtoolsPanel\",\n    \"aria-haspopup\": \"true\",\n    \"aria-expanded\": \"false\",\n    onClick: e => {\n      setIsOpen(true);\n      onToggleClick == null ? void 0 : onToggleClick(e);\n    },\n    style: {\n      background: 'none',\n      border: 0,\n      padding: 0,\n      position: 'fixed',\n      zIndex: 99999,\n      display: 'inline-flex',\n      fontSize: '1.5em',\n      margin: '.5em',\n      cursor: 'pointer',\n      width: 'fit-content',\n      ...(position === 'top-right' ? {\n        top: '0',\n        right: '0'\n      } : position === 'top-left' ? {\n        top: '0',\n        left: '0'\n      } : position === 'bottom-right' ? {\n        bottom: '0',\n        right: '0'\n      } : {\n        bottom: '0',\n        left: '0'\n      }),\n      ...toggleButtonStyle\n    }\n  }), /*#__PURE__*/React.createElement(Logo, {\n    \"aria-hidden\": true\n  }), /*#__PURE__*/React.createElement(ScreenReader, {\n    text: \"Open React Query Devtools\"\n  })) : null);\n}\nconst useSubscribeToQueryCache = function (queryCache, getSnapshot) {\n  let skip = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  return useSyncExternalStore(React.useCallback(onStoreChange => {\n    if (!skip) return queryCache.subscribe(notifyManager.batchCalls(onStoreChange));\n    return () => {\n      return;\n    };\n  }, [queryCache, skip]), getSnapshot, getSnapshot);\n};\nconst ReactQueryDevtoolsPanel = /*#__PURE__*/React.forwardRef(function ReactQueryDevtoolsPanel(props, ref) {\n  const {\n    isOpen = true,\n    styleNonce,\n    setIsOpen,\n    context,\n    onDragStart,\n    onPositionChange,\n    showCloseButton,\n    position,\n    closeButtonProps = {},\n    errorTypes = [],\n    ...panelProps\n  } = props;\n  const {\n    onClick: onCloseClick,\n    ...otherCloseButtonProps\n  } = closeButtonProps;\n  const queryClient = useQueryClient({\n    context\n  });\n  const queryCache = queryClient.getQueryCache();\n  const [sort, setSort] = useLocalStorage('reactQueryDevtoolsSortFn', Object.keys(sortFns)[0]);\n  const [filter, setFilter] = useLocalStorage('reactQueryDevtoolsFilter', '');\n  const [baseSort, setBaseSort] = useLocalStorage('reactQueryDevtoolsBaseSort', 1);\n  const sortFn = React.useMemo(() => sortFns[sort], [sort]);\n  const queriesCount = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().length, !isOpen);\n  const [activeQueryHash, setActiveQueryHash] = useLocalStorage('reactQueryDevtoolsActiveQueryHash', '');\n  const queries = React.useMemo(() => {\n    const unsortedQueries = queryCache.getAll();\n    if (queriesCount === 0) {\n      return [];\n    }\n    const filtered = filter ? unsortedQueries.filter(item => rankItem(item.queryHash, filter).passed) : [...unsortedQueries];\n    const sorted = sortFn ? filtered.sort((a, b) => sortFn(a, b) * baseSort) : filtered;\n    return sorted;\n  }, [baseSort, sortFn, filter, queriesCount, queryCache]);\n  const [isMockOffline, setMockOffline] = React.useState(false);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: defaultTheme\n  }, /*#__PURE__*/React.createElement(Panel, _extends({\n    ref: ref,\n    className: \"ReactQueryDevtoolsPanel\",\n    \"aria-label\": \"React Query Devtools Panel\",\n    id: \"ReactQueryDevtoolsPanel\"\n  }, panelProps, {\n    style: {\n      height: defaultPanelSize,\n      position: 'relative',\n      ...panelProps.style\n    }\n  }), /*#__PURE__*/React.createElement(\"style\", {\n    nonce: styleNonce,\n    dangerouslySetInnerHTML: {\n      __html: \"\\n            .ReactQueryDevtoolsPanel * {\\n              scrollbar-color: \" + defaultTheme.backgroundAlt + \" \" + defaultTheme.gray + \";\\n            }\\n\\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar, .ReactQueryDevtoolsPanel scrollbar {\\n              width: 1em;\\n              height: 1em;\\n            }\\n\\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-track, .ReactQueryDevtoolsPanel scrollbar-track {\\n              background: \" + defaultTheme.backgroundAlt + \";\\n            }\\n\\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-thumb, .ReactQueryDevtoolsPanel scrollbar-thumb {\\n              background: \" + defaultTheme.gray + \";\\n              border-radius: .5em;\\n              border: 3px solid \" + defaultTheme.backgroundAlt + \";\\n            }\\n          \"\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    style: getResizeHandleStyle(position),\n    onMouseDown: onDragStart\n  }), isOpen && /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: '1 1 500px',\n      minHeight: '40%',\n      maxHeight: '100%',\n      overflow: 'auto',\n      borderRight: \"1px solid \" + defaultTheme.grayAlt,\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '.5em',\n      background: defaultTheme.backgroundAlt,\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center'\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    \"aria-label\": \"Close React Query Devtools\",\n    \"aria-controls\": \"ReactQueryDevtoolsPanel\",\n    \"aria-haspopup\": \"true\",\n    \"aria-expanded\": \"true\",\n    onClick: () => setIsOpen(false),\n    style: {\n      display: 'inline-flex',\n      background: 'none',\n      border: 0,\n      padding: 0,\n      marginRight: '.5em',\n      cursor: 'pointer'\n    }\n  }, /*#__PURE__*/React.createElement(Logo, {\n    \"aria-hidden\": true\n  }), /*#__PURE__*/React.createElement(ScreenReader, {\n    text: \"Close React Query Devtools\"\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      flexDirection: 'column'\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      marginBottom: '.5em'\n    }\n  }, /*#__PURE__*/React.createElement(QueryStatusCount, {\n    queryCache: queryCache\n  }), position && onPositionChange ? /*#__PURE__*/React.createElement(Select, {\n    \"aria-label\": \"Panel position\",\n    value: position,\n    style: {\n      marginInlineStart: '.5em'\n    },\n    onChange: e => onPositionChange(e.target.value)\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"left\"\n  }, \"Left\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"right\"\n  }, \"Right\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"top\"\n  }, \"Top\"), /*#__PURE__*/React.createElement(\"option\", {\n    value: \"bottom\"\n  }, \"Bottom\")) : null), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      flexWrap: 'wrap',\n      gap: '0.5em'\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    placeholder: \"Filter\",\n    \"aria-label\": \"Filter by queryhash\",\n    value: filter != null ? filter : '',\n    onChange: e => setFilter(e.target.value),\n    onKeyDown: e => {\n      if (e.key === 'Escape') setFilter('');\n    },\n    style: {\n      flex: '1',\n      width: '100%'\n    }\n  }), /*#__PURE__*/React.createElement(Select, {\n    \"aria-label\": \"Sort queries\",\n    value: sort,\n    onChange: e => setSort(e.target.value),\n    style: {\n      flex: '1',\n      minWidth: 75,\n      marginRight: '.5em'\n    }\n  }, Object.keys(sortFns).map(key => /*#__PURE__*/React.createElement(\"option\", {\n    key: key,\n    value: key\n  }, \"Sort by \", key))), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => setBaseSort(old => old * -1),\n    style: {\n      padding: '.3em .4em',\n      marginRight: '.5em'\n    }\n  }, baseSort === 1 ? '⬆ Asc' : '⬇ Desc'), /*#__PURE__*/React.createElement(Button, {\n    title: \"Clear cache\",\n    \"aria-label\": \"Clear cache\",\n    type: \"button\",\n    onClick: () => queryCache.clear(),\n    style: {\n      padding: '.3em .4em',\n      marginRight: '.5em'\n    }\n  }, \"Clear\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => {\n      if (isMockOffline) {\n        onlineManager.setOnline(undefined);\n        setMockOffline(false);\n        window.dispatchEvent(new Event('online'));\n      } else {\n        onlineManager.setOnline(false);\n        setMockOffline(true);\n      }\n    },\n    \"aria-label\": isMockOffline ? 'Restore offline mock' : 'Mock offline behavior',\n    title: isMockOffline ? 'Restore offline mock' : 'Mock offline behavior',\n    style: {\n      padding: '0',\n      height: '2em'\n    }\n  }, /*#__PURE__*/React.createElement(\"svg\", {\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: \"2em\",\n    height: \"2em\",\n    viewBox: \"0 0 24 24\",\n    stroke: isMockOffline ? defaultTheme.danger : 'currentColor',\n    fill: \"none\"\n  }, isMockOffline ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"none\",\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"18\",\n    x2: \"12.01\",\n    y2: \"18\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.172 15.172a4 4 0 0 1 5.656 0\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.343 12.343a7.963 7.963 0 0 1 3.864 -2.14m4.163 .155a7.965 7.965 0 0 1 3.287 2\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.515 9.515a12 12 0 0 1 3.544 -2.455m3.101 -.92a12 12 0 0 1 10.325 3.374\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"3\",\n    y1: \"3\",\n    x2: \"21\",\n    y2: \"21\"\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"path\", {\n    stroke: \"none\",\n    d: \"M0 0h24v24H0z\",\n    fill: \"none\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"18\",\n    x2: \"12.01\",\n    y2: \"18\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M9.172 15.172a4 4 0 0 1 5.656 0\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M6.343 12.343a8 8 0 0 1 11.314 0\"\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M3.515 9.515c4.686 -4.687 12.284 -4.687 17 0\"\n  }))), /*#__PURE__*/React.createElement(ScreenReader, {\n    text: isMockOffline ? 'Restore offline mock' : 'Mock offline behavior'\n  }))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      overflowY: 'auto',\n      flex: '1'\n    }\n  }, queries.map(query => {\n    return /*#__PURE__*/React.createElement(QueryRow, {\n      queryKey: query.queryKey,\n      activeQueryHash: activeQueryHash,\n      setActiveQueryHash: setActiveQueryHash,\n      key: query.queryHash,\n      queryCache: queryCache\n    });\n  }))), activeQueryHash && isOpen ? /*#__PURE__*/React.createElement(ActiveQuery, {\n    activeQueryHash: activeQueryHash,\n    queryCache: queryCache,\n    queryClient: queryClient,\n    errorTypes: errorTypes\n  }) : null, showCloseButton ? /*#__PURE__*/React.createElement(Button, _extends({\n    type: \"button\",\n    \"aria-controls\": \"ReactQueryDevtoolsPanel\",\n    \"aria-haspopup\": \"true\",\n    \"aria-expanded\": \"true\"\n  }, otherCloseButtonProps, {\n    style: {\n      position: 'absolute',\n      zIndex: 99999,\n      margin: '.5em',\n      bottom: 0,\n      left: 0,\n      ...otherCloseButtonProps.style\n    },\n    onClick: e => {\n      setIsOpen(false);\n      onCloseClick == null ? void 0 : onCloseClick(e);\n    }\n  }), \"Close\") : null));\n});\nconst ActiveQuery = _ref4 => {\n  let {\n    queryCache,\n    activeQueryHash,\n    queryClient,\n    errorTypes\n  } = _ref4;\n  var _useSubscribeToQueryC, _useSubscribeToQueryC2;\n  const activeQuery = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().find(query => query.queryHash === activeQueryHash));\n  const activeQueryState = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$getAll$fi;\n    return (_queryCache$getAll$fi = queryCache.getAll().find(query => query.queryHash === activeQueryHash)) == null ? void 0 : _queryCache$getAll$fi.state;\n  });\n  const isStale = (_useSubscribeToQueryC = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$getAll$fi2;\n    return (_queryCache$getAll$fi2 = queryCache.getAll().find(query => query.queryHash === activeQueryHash)) == null ? void 0 : _queryCache$getAll$fi2.isStale();\n  })) != null ? _useSubscribeToQueryC : false;\n  const observerCount = (_useSubscribeToQueryC2 = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$getAll$fi3;\n    return (_queryCache$getAll$fi3 = queryCache.getAll().find(query => query.queryHash === activeQueryHash)) == null ? void 0 : _queryCache$getAll$fi3.getObserversCount();\n  })) != null ? _useSubscribeToQueryC2 : 0;\n  const handleRefetch = () => {\n    const promise = activeQuery == null ? void 0 : activeQuery.fetch();\n    promise == null ? void 0 : promise.catch(noop);\n  };\n  const currentErrorTypeName = useMemo(() => {\n    if (activeQuery && activeQueryState != null && activeQueryState.error) {\n      const errorType = errorTypes.find(type => {\n        var _activeQueryState$err;\n        return type.initializer(activeQuery).toString() === ((_activeQueryState$err = activeQueryState.error) == null ? void 0 : _activeQueryState$err.toString());\n      });\n      return errorType == null ? void 0 : errorType.name;\n    }\n    return undefined;\n  }, [activeQuery, activeQueryState == null ? void 0 : activeQueryState.error, errorTypes]);\n  if (!activeQuery || !activeQueryState) {\n    return null;\n  }\n  const triggerError = errorType => {\n    var _errorType$initialize;\n    const error = (_errorType$initialize = errorType == null ? void 0 : errorType.initializer(activeQuery)) != null ? _errorType$initialize : new Error('Unknown error from devtools');\n    const __previousQueryOptions = activeQuery.options;\n    activeQuery.setState({\n      status: 'error',\n      error,\n      fetchMeta: {\n        ...activeQuery.state.fetchMeta,\n        __previousQueryOptions\n      }\n    });\n  };\n  const restoreQueryAfterLoadingOrError = () => {\n    activeQuery.fetch(activeQuery.state.fetchMeta.__previousQueryOptions, {\n      // Make sure this fetch will cancel the previous one\n      cancelRefetch: true\n    });\n  };\n  return /*#__PURE__*/React.createElement(ActiveQueryPanel, null, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '.5em',\n      background: defaultTheme.backgroundAlt,\n      position: 'sticky',\n      top: 0,\n      zIndex: 1\n    }\n  }, \"Query Details\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '.5em'\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: '.5em',\n      display: 'flex',\n      alignItems: 'flex-start',\n      justifyContent: 'space-between'\n    }\n  }, /*#__PURE__*/React.createElement(Code, {\n    style: {\n      lineHeight: '1.8em'\n    }\n  }, /*#__PURE__*/React.createElement(\"pre\", {\n    style: {\n      margin: 0,\n      padding: 0,\n      overflow: 'auto'\n    }\n  }, displayValue(activeQuery.queryKey, true))), /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      padding: '0.3em .6em',\n      borderRadius: '0.4em',\n      fontWeight: 'bold',\n      textShadow: '0 2px 10px black',\n      background: getQueryStatusColor({\n        queryState: activeQueryState,\n        isStale: isStale,\n        observerCount: observerCount,\n        theme: defaultTheme\n      }),\n      flexShrink: 0\n    }\n  }, getQueryStatusLabel(activeQuery))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginBottom: '.5em',\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    }\n  }, \"Observers: \", /*#__PURE__*/React.createElement(Code, null, observerCount)), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    }\n  }, \"Last Updated:\", ' ', /*#__PURE__*/React.createElement(Code, null, new Date(activeQueryState.dataUpdatedAt).toLocaleTimeString()))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: defaultTheme.backgroundAlt,\n      padding: '.5em',\n      position: 'sticky',\n      top: 0,\n      zIndex: 1\n    }\n  }, \"Actions\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '0.5em',\n      display: 'flex',\n      flexWrap: 'wrap',\n      gap: '0.5em',\n      alignItems: 'flex-end'\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: handleRefetch,\n    disabled: activeQueryState.fetchStatus === 'fetching',\n    style: {\n      background: defaultTheme.active\n    }\n  }, \"Refetch\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => queryClient.invalidateQueries(activeQuery),\n    style: {\n      background: defaultTheme.warning,\n      color: defaultTheme.inputTextColor\n    }\n  }, \"Invalidate\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => queryClient.resetQueries(activeQuery),\n    style: {\n      background: defaultTheme.gray\n    }\n  }, \"Reset\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => queryClient.removeQueries(activeQuery),\n    style: {\n      background: defaultTheme.danger\n    }\n  }, \"Remove\"), ' ', /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => {\n      var _activeQuery$state$fe;\n\n      // Return early if the query is already restoring\n      if (activeQuery.state.fetchStatus === 'fetching' && typeof ((_activeQuery$state$fe = activeQuery.state.fetchMeta) == null ? void 0 : _activeQuery$state$fe.__previousQueryOptions) === 'undefined') {\n        return;\n      }\n      if (activeQuery.state.data === undefined) {\n        restoreQueryAfterLoadingOrError();\n      } else {\n        const __previousQueryOptions = activeQuery.options; // Trigger a fetch in order to trigger suspense as well.\n\n        activeQuery.fetch({\n          ...__previousQueryOptions,\n          queryFn: () => {\n            return new Promise(() => {// Never resolve\n            });\n          },\n          cacheTime: -1\n        });\n        activeQuery.setState({\n          data: undefined,\n          status: 'loading',\n          fetchMeta: {\n            ...activeQuery.state.fetchMeta,\n            __previousQueryOptions\n          }\n        });\n      }\n    },\n    style: {\n      background: defaultTheme.paused\n    }\n  }, activeQuery.state.status === 'loading' ? 'Restore' : 'Trigger', ' ', \"loading\"), ' ', errorTypes.length === 0 || activeQuery.state.status === 'error' ? /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: () => {\n      if (!activeQuery.state.error) {\n        triggerError();\n      } else {\n        queryClient.resetQueries(activeQuery);\n      }\n    },\n    style: {\n      background: defaultTheme.danger\n    }\n  }, activeQuery.state.status === 'error' ? 'Restore' : 'Trigger', \" error\") : /*#__PURE__*/React.createElement(\"label\", null, \"Trigger error:\", /*#__PURE__*/React.createElement(Select, {\n    value: currentErrorTypeName != null ? currentErrorTypeName : '',\n    style: {\n      marginInlineStart: '.5em'\n    },\n    onChange: e => {\n      const errorType = errorTypes.find(t => t.name === e.target.value);\n      triggerError(errorType);\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    key: \"\",\n    value: \"\"\n  }), errorTypes.map(errorType => /*#__PURE__*/React.createElement(\"option\", {\n    key: errorType.name,\n    value: errorType.name\n  }, errorType.name))))), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: defaultTheme.backgroundAlt,\n      padding: '.5em',\n      position: 'sticky',\n      top: 0,\n      zIndex: 1\n    }\n  }, \"Data Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '.5em'\n    }\n  }, /*#__PURE__*/React.createElement(Explorer, {\n    label: \"Data\",\n    value: activeQueryState.data,\n    defaultExpanded: {},\n    copyable: true\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      background: defaultTheme.backgroundAlt,\n      padding: '.5em',\n      position: 'sticky',\n      top: 0,\n      zIndex: 1\n    }\n  }, \"Query Explorer\"), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      padding: '.5em'\n    }\n  }, /*#__PURE__*/React.createElement(Explorer, {\n    label: \"Query\",\n    value: activeQuery,\n    defaultExpanded: {\n      queryKey: true\n    }\n  })));\n};\nconst QueryStatusCount = _ref5 => {\n  let {\n    queryCache\n  } = _ref5;\n  const hasFresh = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().filter(q => getQueryStatusLabel(q) === 'fresh').length);\n  const hasFetching = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().filter(q => getQueryStatusLabel(q) === 'fetching').length);\n  const hasPaused = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().filter(q => getQueryStatusLabel(q) === 'paused').length);\n  const hasStale = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().filter(q => getQueryStatusLabel(q) === 'stale').length);\n  const hasInactive = useSubscribeToQueryCache(queryCache, () => queryCache.getAll().filter(q => getQueryStatusLabel(q) === 'inactive').length);\n  return /*#__PURE__*/React.createElement(QueryKeys, null, /*#__PURE__*/React.createElement(QueryKey, {\n    style: {\n      background: defaultTheme.success,\n      opacity: hasFresh ? 1 : 0.3\n    }\n  }, \"fresh \", /*#__PURE__*/React.createElement(Code, null, \"(\", hasFresh, \")\")), ' ', /*#__PURE__*/React.createElement(QueryKey, {\n    style: {\n      background: defaultTheme.active,\n      opacity: hasFetching ? 1 : 0.3\n    }\n  }, \"fetching \", /*#__PURE__*/React.createElement(Code, null, \"(\", hasFetching, \")\")), ' ', /*#__PURE__*/React.createElement(QueryKey, {\n    style: {\n      background: defaultTheme.paused,\n      opacity: hasPaused ? 1 : 0.3\n    }\n  }, \"paused \", /*#__PURE__*/React.createElement(Code, null, \"(\", hasPaused, \")\")), ' ', /*#__PURE__*/React.createElement(QueryKey, {\n    style: {\n      background: defaultTheme.warning,\n      color: 'black',\n      textShadow: '0',\n      opacity: hasStale ? 1 : 0.3\n    }\n  }, \"stale \", /*#__PURE__*/React.createElement(Code, null, \"(\", hasStale, \")\")), ' ', /*#__PURE__*/React.createElement(QueryKey, {\n    style: {\n      background: defaultTheme.gray,\n      opacity: hasInactive ? 1 : 0.3\n    }\n  }, \"inactive \", /*#__PURE__*/React.createElement(Code, null, \"(\", hasInactive, \")\")));\n};\nconst QueryRow = /*#__PURE__*/React.memo(_ref6 => {\n  let {\n    queryKey,\n    setActiveQueryHash,\n    activeQueryHash,\n    queryCache\n  } = _ref6;\n  var _useSubscribeToQueryC3, _useSubscribeToQueryC4, _useSubscribeToQueryC5, _useSubscribeToQueryC6;\n  const queryHash = (_useSubscribeToQueryC3 = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$find;\n    return (_queryCache$find = queryCache.find(queryKey)) == null ? void 0 : _queryCache$find.queryHash;\n  })) != null ? _useSubscribeToQueryC3 : '';\n  const queryState = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$find2;\n    return (_queryCache$find2 = queryCache.find(queryKey)) == null ? void 0 : _queryCache$find2.state;\n  });\n  const isStale = (_useSubscribeToQueryC4 = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$find3;\n    return (_queryCache$find3 = queryCache.find(queryKey)) == null ? void 0 : _queryCache$find3.isStale();\n  })) != null ? _useSubscribeToQueryC4 : false;\n  const isDisabled = (_useSubscribeToQueryC5 = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$find4;\n    return (_queryCache$find4 = queryCache.find(queryKey)) == null ? void 0 : _queryCache$find4.isDisabled();\n  })) != null ? _useSubscribeToQueryC5 : false;\n  const observerCount = (_useSubscribeToQueryC6 = useSubscribeToQueryCache(queryCache, () => {\n    var _queryCache$find5;\n    return (_queryCache$find5 = queryCache.find(queryKey)) == null ? void 0 : _queryCache$find5.getObserversCount();\n  })) != null ? _useSubscribeToQueryC6 : 0;\n  if (!queryState) {\n    return null;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    role: \"button\",\n    \"aria-label\": \"Open query details for \" + queryHash,\n    onClick: () => setActiveQueryHash(activeQueryHash === queryHash ? '' : queryHash),\n    style: {\n      display: 'flex',\n      borderBottom: \"solid 1px \" + defaultTheme.grayAlt,\n      cursor: 'pointer',\n      background: queryHash === activeQueryHash ? 'rgba(255,255,255,.1)' : undefined\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: '0 0 auto',\n      width: '2em',\n      height: '2em',\n      background: getQueryStatusColor({\n        queryState,\n        isStale,\n        observerCount,\n        theme: defaultTheme\n      }),\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      fontWeight: 'bold',\n      textShadow: isStale ? '0' : '0 0 10px black',\n      color: isStale ? 'black' : 'white'\n    }\n  }, observerCount), isDisabled ? /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      flex: '0 0 auto',\n      height: '2em',\n      background: defaultTheme.gray,\n      display: 'flex',\n      alignItems: 'center',\n      fontWeight: 'bold',\n      padding: '0 0.5em'\n    }\n  }, \"disabled\") : null, /*#__PURE__*/React.createElement(Code, {\n    style: {\n      padding: '.5em'\n    }\n  }, \"\" + queryHash));\n});\nQueryRow.displayName = 'QueryRow'; // eslint-disable-next-line @typescript-eslint/no-empty-function\n\nfunction noop() {}\nexport { ReactQueryDevtools, ReactQueryDevtoolsPanel };","map":{"version":3,"sources":["../../src/devtools.tsx"],"names":["panelProps","closeButtonProps","toggleButtonProps","position","errorTypes","width","newSize","document","setIsResolvedOpen","ref","parentElement","paddingRight","window","Object","onClick","devtoolsTheme","isOpen","height","panelStyle","onToggleClick","background","border","padding","zIndex","display","fontSize","margin","cursor","top","right","left","bottom","ReactQueryDevtoolsPanel","context","__html","flex","minHeight","maxHeight","overflow","flexDirection","justifyContent","alignItems","marginRight","marginBottom","marginInlineStart","flexWrap","gap","minWidth","overflowY","onCloseClick","promise","status","fetchMeta","__previousQueryOptions","cancelRefetch","lineHeight","borderRadius","fontWeight","textShadow","queryState","isStale","observerCount","theme","flexShrink","activeQuery","queryFn","cacheTime","data","queryKey","queryCache","opacity","color","QueryRow"],"mappings":"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","sourcesContent":["'use client'\nimport * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type {\n  QueryCache,\n  QueryClient,\n  QueryKey as QueryKeyType,\n  ContextOptions,\n  Query,\n} from '@tanstack/react-query'\nimport {\n  useQueryClient,\n  onlineManager,\n  notifyManager,\n} from '@tanstack/react-query'\nimport { rankItem } from '@tanstack/match-sorter-utils'\nimport useLocalStorage from './useLocalStorage'\nimport {\n  isVerticalSide,\n  sortFns,\n  useIsMounted,\n  getSidePanelStyle,\n  minPanelSize,\n  getResizeHandleStyle,\n  getSidedProp,\n  defaultPanelSize,\n  displayValue,\n} from './utils'\nimport type { Corner, Side } from './utils'\nimport {\n  Panel,\n  QueryKeys,\n  QueryKey,\n  Button,\n  Code,\n  Input,\n  Select,\n  ActiveQueryPanel,\n} from './styledComponents'\nimport ScreenReader from './screenreader'\nimport { ThemeProvider, defaultTheme as theme } from './theme'\nimport { getQueryStatusLabel, getQueryStatusColor } from './utils'\nimport Explorer from './Explorer'\nimport Logo from './Logo'\nimport { useMemo } from 'react'\n\nexport interface DevToolsErrorType {\n  /**\n   * The name of the error.\n   */\n  name: string\n  /**\n   * How the error is initialized. Whatever it returns MUST implement toString() so\n   * we can check against the current error.\n   */\n  initializer: (query: Query) => { toString(): string }\n}\n\nexport interface DevtoolsOptions extends ContextOptions {\n  /**\n   * Set this true if you want the dev tools to default to being open\n   */\n  initialIsOpen?: boolean\n  /**\n   * Use this to add props to the panel. For example, you can add className, style (merge and override default style), etc.\n   */\n  panelProps?: React.ComponentPropsWithoutRef<'div'>\n  /**\n   * Use this to add props to the close button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: React.ComponentPropsWithoutRef<'button'>\n  /**\n   * Use this to add props to the toggle button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  toggleButtonProps?: React.ComponentPropsWithoutRef<'button'>\n  /**\n   * The position of the React Query logo to open and close the devtools panel.\n   * Defaults to 'bottom-left'.\n   */\n  position?: Corner\n  /**\n   * The position of the React Query devtools panel.\n   * Defaults to 'bottom'.\n   */\n  panelPosition?: Side\n  /**\n   * Use this to render the devtools inside a different type of container element for a11y purposes.\n   * Any string which corresponds to a valid intrinsic JSX element is allowed.\n   * Defaults to 'aside'.\n   */\n  containerElement?: string | any\n  /**\n   * nonce for style element for CSP\n   */\n  styleNonce?: string\n  /**\n   * Use this so you can define custom errors that can be shown in the devtools.\n   */\n  errorTypes?: DevToolsErrorType[]\n}\n\ninterface DevtoolsPanelOptions extends ContextOptions {\n  /**\n   * The standard React style object used to style a component with inline styles\n   */\n  style?: React.CSSProperties\n  /**\n   * The standard React className property used to style a component with classes\n   */\n  className?: string\n  /**\n   * A boolean variable indicating whether the panel is open or closed\n   */\n  isOpen?: boolean\n  /**\n   * nonce for style element for CSP\n   */\n  styleNonce?: string\n  /**\n   * A function that toggles the open and close state of the panel\n   */\n  setIsOpen: (isOpen: boolean) => void\n  /**\n   * Handles the opening and closing the devtools panel\n   */\n  onDragStart: (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => void\n  /**\n   * The position of the React Query devtools panel.\n   * Defaults to 'bottom'.\n   */\n  position?: Side\n  /**\n   * Handles the panel position select change\n   */\n  onPositionChange?: (side: Side) => void\n  /**\n   * Show a close button inside the panel\n   */\n  showCloseButton?: boolean\n  /**\n   * Use this to add props to the close button. For example, you can add className, style (merge and override default style), onClick (extend default handler), etc.\n   */\n  closeButtonProps?: React.ComponentPropsWithoutRef<'button'>\n  /**\n   * Use this so you can define custom errors that can be shown in the devtools.\n   */\n  errorTypes?: DevToolsErrorType[]\n}\n\nexport function ReactQueryDevtools({\n  initialIsOpen,\n  panelProps = {},\n  closeButtonProps = {},\n  toggleButtonProps = {},\n  position = 'bottom-left',\n  containerElement: Container = 'aside',\n  context,\n  styleNonce,\n  panelPosition: initialPanelPosition = 'bottom',\n  errorTypes = [],\n}: DevtoolsOptions): React.ReactElement | null {\n  const rootRef = React.useRef<HTMLDivElement>(null)\n  const panelRef = React.useRef<HTMLDivElement>(null)\n  const [isOpen, setIsOpen] = useLocalStorage(\n    'reactQueryDevtoolsOpen',\n    initialIsOpen,\n  )\n  const [devtoolsHeight, setDevtoolsHeight] = useLocalStorage<number>(\n    'reactQueryDevtoolsHeight',\n    defaultPanelSize,\n  )\n  const [devtoolsWidth, setDevtoolsWidth] = useLocalStorage<number>(\n    'reactQueryDevtoolsWidth',\n    defaultPanelSize,\n  )\n\n  const [panelPosition = 'bottom', setPanelPosition] = useLocalStorage<Side>(\n    'reactQueryDevtoolsPanelPosition',\n    initialPanelPosition,\n  )\n\n  const [isResolvedOpen, setIsResolvedOpen] = React.useState(false)\n  const [isResizing, setIsResizing] = React.useState(false)\n  const isMounted = useIsMounted()\n\n  const handleDragStart = (\n    panelElement: HTMLDivElement | null,\n    startEvent: React.MouseEvent<HTMLDivElement, MouseEvent>,\n  ) => {\n    if (!panelElement) return\n    if (startEvent.button !== 0) return // Only allow left click for drag\n    const isVertical = isVerticalSide(panelPosition)\n    setIsResizing(true)\n\n    const { height, width } = panelElement.getBoundingClientRect()\n    const startX = startEvent.clientX\n    const startY = startEvent.clientY\n    let newSize = 0\n\n    const run = (moveEvent: MouseEvent) => {\n      // prevent mouse selecting stuff with mouse drag\n      moveEvent.preventDefault()\n\n      // calculate the correct size based on mouse position and current panel position\n      // hint: it is different formula for the opposite sides\n      if (isVertical) {\n        newSize =\n          width +\n          (panelPosition === 'right'\n            ? startX - moveEvent.clientX\n            : moveEvent.clientX - startX)\n        setDevtoolsWidth(newSize)\n      } else {\n        newSize =\n          height +\n          (panelPosition === 'bottom'\n            ? startY - moveEvent.clientY\n            : moveEvent.clientY - startY)\n        setDevtoolsHeight(newSize)\n      }\n\n      if (newSize < minPanelSize) {\n        setIsOpen(false)\n      } else {\n        setIsOpen(true)\n      }\n    }\n\n    const unsub = () => {\n      if (isResizing) {\n        setIsResizing(false)\n      }\n\n      document.removeEventListener('mousemove', run, false)\n      document.removeEventListener('mouseUp', unsub, false)\n    }\n\n    document.addEventListener('mousemove', run, false)\n    document.addEventListener('mouseup', unsub, false)\n  }\n\n  React.useEffect(() => {\n    setIsResolvedOpen(isOpen ?? false)\n  }, [isOpen, isResolvedOpen, setIsResolvedOpen])\n\n  // Toggle panel visibility before/after transition (depending on direction).\n  // Prevents focusing in a closed panel.\n  React.useEffect(() => {\n    const ref = panelRef.current\n    if (ref) {\n      const handlePanelTransitionStart = () => {\n        if (isResolvedOpen) {\n          ref.style.visibility = 'visible'\n        }\n      }\n\n      const handlePanelTransitionEnd = () => {\n        if (!isResolvedOpen) {\n          ref.style.visibility = 'hidden'\n        }\n      }\n\n      ref.addEventListener('transitionstart', handlePanelTransitionStart)\n      ref.addEventListener('transitionend', handlePanelTransitionEnd)\n\n      return () => {\n        ref.removeEventListener('transitionstart', handlePanelTransitionStart)\n        ref.removeEventListener('transitionend', handlePanelTransitionEnd)\n      }\n    }\n    return\n  }, [isResolvedOpen])\n\n  React.useEffect(() => {\n    if (isResolvedOpen && rootRef.current?.parentElement) {\n      const { parentElement } = rootRef.current\n      const styleProp = getSidedProp('padding', panelPosition)\n      const isVertical = isVerticalSide(panelPosition)\n\n      const previousPaddings = (({\n        padding,\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n      }) => ({\n        padding,\n        paddingTop,\n        paddingBottom,\n        paddingLeft,\n        paddingRight,\n      }))(parentElement.style)\n\n      const run = () => {\n        // reset the padding\n        parentElement.style.padding = '0px'\n        parentElement.style.paddingTop = '0px'\n        parentElement.style.paddingBottom = '0px'\n        parentElement.style.paddingLeft = '0px'\n        parentElement.style.paddingRight = '0px'\n        // set the new padding based on the new panel position\n\n        parentElement.style[styleProp] = `${\n          isVertical ? devtoolsWidth : devtoolsHeight\n        }px`\n      }\n\n      run()\n\n      if (typeof window !== 'undefined') {\n        window.addEventListener('resize', run)\n\n        return () => {\n          window.removeEventListener('resize', run)\n          Object.entries(previousPaddings).forEach(\n            ([property, previousValue]) => {\n              parentElement.style[property as keyof typeof previousPaddings] =\n                previousValue\n            },\n          )\n        }\n      }\n    }\n    return\n  }, [isResolvedOpen, panelPosition, devtoolsHeight, devtoolsWidth])\n\n  const { style: panelStyle = {}, ...otherPanelProps } = panelProps\n\n  const {\n    style: toggleButtonStyle = {},\n    onClick: onToggleClick,\n    ...otherToggleButtonProps\n  } = toggleButtonProps\n\n  // get computed style based on panel position\n  const style = getSidePanelStyle({\n    position: panelPosition,\n    devtoolsTheme: theme,\n    isOpen: isResolvedOpen,\n    height: devtoolsHeight,\n    width: devtoolsWidth,\n    isResizing,\n    panelStyle,\n  })\n\n  // Do not render on the server\n  if (!isMounted()) return null\n\n  return (\n    <Container\n      ref={rootRef}\n      className=\"ReactQueryDevtools\"\n      aria-label=\"React Query Devtools\"\n    >\n      <ThemeProvider theme={theme}>\n        <ReactQueryDevtoolsPanel\n          ref={panelRef as any}\n          context={context}\n          styleNonce={styleNonce}\n          position={panelPosition}\n          onPositionChange={setPanelPosition}\n          showCloseButton\n          closeButtonProps={closeButtonProps}\n          {...otherPanelProps}\n          style={style}\n          isOpen={isResolvedOpen}\n          setIsOpen={setIsOpen}\n          onDragStart={(e) => handleDragStart(panelRef.current, e)}\n          errorTypes={errorTypes}\n        />\n      </ThemeProvider>\n      {!isResolvedOpen ? (\n        <button\n          type=\"button\"\n          {...otherToggleButtonProps}\n          aria-label=\"Open React Query Devtools\"\n          aria-controls=\"ReactQueryDevtoolsPanel\"\n          aria-haspopup=\"true\"\n          aria-expanded=\"false\"\n          onClick={(e) => {\n            setIsOpen(true)\n            onToggleClick?.(e)\n          }}\n          style={{\n            background: 'none',\n            border: 0,\n            padding: 0,\n            position: 'fixed',\n            zIndex: 99999,\n            display: 'inline-flex',\n            fontSize: '1.5em',\n            margin: '.5em',\n            cursor: 'pointer',\n            width: 'fit-content',\n            ...(position === 'top-right'\n              ? {\n                  top: '0',\n                  right: '0',\n                }\n              : position === 'top-left'\n              ? {\n                  top: '0',\n                  left: '0',\n                }\n              : position === 'bottom-right'\n              ? {\n                  bottom: '0',\n                  right: '0',\n                }\n              : {\n                  bottom: '0',\n                  left: '0',\n                }),\n            ...toggleButtonStyle,\n          }}\n        >\n          <Logo aria-hidden />\n          <ScreenReader text=\"Open React Query Devtools\" />\n        </button>\n      ) : null}\n    </Container>\n  )\n}\n\nconst useSubscribeToQueryCache = <T,>(\n  queryCache: QueryCache,\n  getSnapshot: () => T,\n  skip: boolean = false,\n): T => {\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) => {\n        if (!skip)\n          return queryCache.subscribe(notifyManager.batchCalls(onStoreChange))\n        return () => {\n          return\n        }\n      },\n      [queryCache, skip],\n    ),\n    getSnapshot,\n    getSnapshot,\n  )\n}\n\nexport const ReactQueryDevtoolsPanel = React.forwardRef<\n  HTMLDivElement,\n  DevtoolsPanelOptions\n>(function ReactQueryDevtoolsPanel(props, ref): React.ReactElement {\n  const {\n    isOpen = true,\n    styleNonce,\n    setIsOpen,\n    context,\n    onDragStart,\n    onPositionChange,\n    showCloseButton,\n    position,\n    closeButtonProps = {},\n    errorTypes = [],\n    ...panelProps\n  } = props\n\n  const { onClick: onCloseClick, ...otherCloseButtonProps } = closeButtonProps\n\n  const queryClient = useQueryClient({ context })\n  const queryCache = queryClient.getQueryCache()\n\n  const [sort, setSort] = useLocalStorage(\n    'reactQueryDevtoolsSortFn',\n    Object.keys(sortFns)[0],\n  )\n\n  const [filter, setFilter] = useLocalStorage('reactQueryDevtoolsFilter', '')\n\n  const [baseSort, setBaseSort] = useLocalStorage(\n    'reactQueryDevtoolsBaseSort',\n    1,\n  )\n\n  const sortFn = React.useMemo(() => sortFns[sort as string], [sort])\n\n  const queriesCount = useSubscribeToQueryCache(\n    queryCache,\n    () => queryCache.getAll().length,\n    !isOpen,\n  )\n\n  const [activeQueryHash, setActiveQueryHash] = useLocalStorage(\n    'reactQueryDevtoolsActiveQueryHash',\n    '',\n  )\n\n  const queries = React.useMemo(() => {\n    const unsortedQueries = queryCache.getAll()\n\n    if (queriesCount === 0) {\n      return []\n    }\n\n    const filtered = filter\n      ? unsortedQueries.filter(\n          (item) => rankItem(item.queryHash, filter).passed,\n        )\n      : [...unsortedQueries]\n\n    const sorted = sortFn\n      ? filtered.sort((a, b) => sortFn(a, b) * (baseSort as number))\n      : filtered\n\n    return sorted\n  }, [baseSort, sortFn, filter, queriesCount, queryCache])\n\n  const [isMockOffline, setMockOffline] = React.useState(false)\n\n  return (\n    <ThemeProvider theme={theme}>\n      <Panel\n        ref={ref}\n        className=\"ReactQueryDevtoolsPanel\"\n        aria-label=\"React Query Devtools Panel\"\n        id=\"ReactQueryDevtoolsPanel\"\n        {...panelProps}\n        style={{\n          height: defaultPanelSize,\n          position: 'relative',\n          ...panelProps.style,\n        }}\n      >\n        <style\n          nonce={styleNonce}\n          dangerouslySetInnerHTML={{\n            __html: `\n            .ReactQueryDevtoolsPanel * {\n              scrollbar-color: ${theme.backgroundAlt} ${theme.gray};\n            }\n\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar, .ReactQueryDevtoolsPanel scrollbar {\n              width: 1em;\n              height: 1em;\n            }\n\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-track, .ReactQueryDevtoolsPanel scrollbar-track {\n              background: ${theme.backgroundAlt};\n            }\n\n            .ReactQueryDevtoolsPanel *::-webkit-scrollbar-thumb, .ReactQueryDevtoolsPanel scrollbar-thumb {\n              background: ${theme.gray};\n              border-radius: .5em;\n              border: 3px solid ${theme.backgroundAlt};\n            }\n          `,\n          }}\n        />\n        <div\n          style={getResizeHandleStyle(position)}\n          onMouseDown={onDragStart}\n        ></div>\n\n        {isOpen && (\n          <div\n            style={{\n              flex: '1 1 500px',\n              minHeight: '40%',\n              maxHeight: '100%',\n              overflow: 'auto',\n              borderRight: `1px solid ${theme.grayAlt}`,\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <div\n              style={{\n                padding: '.5em',\n                background: theme.backgroundAlt,\n                display: 'flex',\n                justifyContent: 'space-between',\n                alignItems: 'center',\n              }}\n            >\n              <button\n                type=\"button\"\n                aria-label=\"Close React Query Devtools\"\n                aria-controls=\"ReactQueryDevtoolsPanel\"\n                aria-haspopup=\"true\"\n                aria-expanded=\"true\"\n                onClick={() => setIsOpen(false)}\n                style={{\n                  display: 'inline-flex',\n                  background: 'none',\n                  border: 0,\n                  padding: 0,\n                  marginRight: '.5em',\n                  cursor: 'pointer',\n                }}\n              >\n                <Logo aria-hidden />\n                <ScreenReader text=\"Close React Query Devtools\" />\n              </button>\n\n              <div\n                style={{\n                  display: 'flex',\n                  flexDirection: 'column',\n                }}\n              >\n                <div\n                  style={{\n                    display: 'flex',\n                    justifyContent: 'space-between',\n                    alignItems: 'center',\n                    marginBottom: '.5em',\n                  }}\n                >\n                  <QueryStatusCount queryCache={queryCache} />\n                  {position && onPositionChange ? (\n                    <Select\n                      aria-label=\"Panel position\"\n                      value={position}\n                      style={{ marginInlineStart: '.5em' }}\n                      onChange={(e) => onPositionChange(e.target.value as Side)}\n                    >\n                      <option value=\"left\">Left</option>\n                      <option value=\"right\">Right</option>\n                      <option value=\"top\">Top</option>\n                      <option value=\"bottom\">Bottom</option>\n                    </Select>\n                  ) : null}\n                </div>\n                <div\n                  style={{\n                    display: 'flex',\n                    alignItems: 'center',\n                    flexWrap: 'wrap',\n                    gap: '0.5em',\n                  }}\n                >\n                  <Input\n                    placeholder=\"Filter\"\n                    aria-label=\"Filter by queryhash\"\n                    value={filter ?? ''}\n                    onChange={(e) => setFilter(e.target.value)}\n                    onKeyDown={(e) => {\n                      if (e.key === 'Escape') setFilter('')\n                    }}\n                    style={{\n                      flex: '1',\n                      width: '100%',\n                    }}\n                  />\n                  <Select\n                    aria-label=\"Sort queries\"\n                    value={sort}\n                    onChange={(e) => setSort(e.target.value)}\n                    style={{\n                      flex: '1',\n                      minWidth: 75,\n                      marginRight: '.5em',\n                    }}\n                  >\n                    {Object.keys(sortFns).map((key) => (\n                      <option key={key} value={key}>\n                        Sort by {key}\n                      </option>\n                    ))}\n                  </Select>\n                  <Button\n                    type=\"button\"\n                    onClick={() => setBaseSort((old) => old * -1)}\n                    style={{\n                      padding: '.3em .4em',\n                      marginRight: '.5em',\n                    }}\n                  >\n                    {baseSort === 1 ? '⬆ Asc' : '⬇ Desc'}\n                  </Button>\n                  <Button\n                    title=\"Clear cache\"\n                    aria-label=\"Clear cache\"\n                    type=\"button\"\n                    onClick={() => queryCache.clear()}\n                    style={{\n                      padding: '.3em .4em',\n                      marginRight: '.5em',\n                    }}\n                  >\n                    Clear\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    onClick={() => {\n                      if (isMockOffline) {\n                        onlineManager.setOnline(undefined)\n                        setMockOffline(false)\n                        window.dispatchEvent(new Event('online'))\n                      } else {\n                        onlineManager.setOnline(false)\n                        setMockOffline(true)\n                      }\n                    }}\n                    aria-label={\n                      isMockOffline\n                        ? 'Restore offline mock'\n                        : 'Mock offline behavior'\n                    }\n                    title={\n                      isMockOffline\n                        ? 'Restore offline mock'\n                        : 'Mock offline behavior'\n                    }\n                    style={{\n                      padding: '0',\n                      height: '2em',\n                    }}\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      width=\"2em\"\n                      height=\"2em\"\n                      viewBox=\"0 0 24 24\"\n                      stroke={isMockOffline ? theme.danger : 'currentColor'}\n                      fill=\"none\"\n                    >\n                      {isMockOffline ? (\n                        <>\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          <line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\" />\n                          <path d=\"M9.172 15.172a4 4 0 0 1 5.656 0\" />\n                          <path d=\"M6.343 12.343a7.963 7.963 0 0 1 3.864 -2.14m4.163 .155a7.965 7.965 0 0 1 3.287 2\" />\n                          <path d=\"M3.515 9.515a12 12 0 0 1 3.544 -2.455m3.101 -.92a12 12 0 0 1 10.325 3.374\" />\n                          <line x1=\"3\" y1=\"3\" x2=\"21\" y2=\"21\" />\n                        </>\n                      ) : (\n                        <>\n                          <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\n                          <line x1=\"12\" y1=\"18\" x2=\"12.01\" y2=\"18\" />\n                          <path d=\"M9.172 15.172a4 4 0 0 1 5.656 0\" />\n                          <path d=\"M6.343 12.343a8 8 0 0 1 11.314 0\" />\n                          <path d=\"M3.515 9.515c4.686 -4.687 12.284 -4.687 17 0\" />\n                        </>\n                      )}\n                    </svg>\n                    <ScreenReader\n                      text={\n                        isMockOffline\n                          ? 'Restore offline mock'\n                          : 'Mock offline behavior'\n                      }\n                    />\n                  </Button>\n                </div>\n              </div>\n            </div>\n            <div\n              style={{\n                overflowY: 'auto',\n                flex: '1',\n              }}\n            >\n              {queries.map((query) => {\n                return (\n                  <QueryRow\n                    queryKey={query.queryKey}\n                    activeQueryHash={activeQueryHash}\n                    setActiveQueryHash={setActiveQueryHash}\n                    key={query.queryHash}\n                    queryCache={queryCache}\n                  />\n                )\n              })}\n            </div>\n          </div>\n        )}\n\n        {activeQueryHash && isOpen ? (\n          <ActiveQuery\n            activeQueryHash={activeQueryHash}\n            queryCache={queryCache}\n            queryClient={queryClient}\n            errorTypes={errorTypes}\n          />\n        ) : null}\n\n        {showCloseButton ? (\n          <Button\n            type=\"button\"\n            aria-controls=\"ReactQueryDevtoolsPanel\"\n            aria-haspopup=\"true\"\n            aria-expanded=\"true\"\n            {...(otherCloseButtonProps as Record<string, unknown>)}\n            style={{\n              position: 'absolute',\n              zIndex: 99999,\n              margin: '.5em',\n              bottom: 0,\n              left: 0,\n              ...otherCloseButtonProps.style,\n            }}\n            onClick={(e) => {\n              setIsOpen(false)\n              onCloseClick?.(e)\n            }}\n          >\n            Close\n          </Button>\n        ) : null}\n      </Panel>\n    </ThemeProvider>\n  )\n})\n\nconst ActiveQuery = ({\n  queryCache,\n  activeQueryHash,\n  queryClient,\n  errorTypes,\n}: {\n  queryCache: QueryCache\n  activeQueryHash: string\n  queryClient: QueryClient\n  errorTypes: DevToolsErrorType[]\n}) => {\n  const activeQuery = useSubscribeToQueryCache(queryCache, () =>\n    queryCache.getAll().find((query) => query.queryHash === activeQueryHash),\n  )\n\n  const activeQueryState = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().find((query) => query.queryHash === activeQueryHash)\n        ?.state,\n  )\n\n  const isStale =\n    useSubscribeToQueryCache(queryCache, () =>\n      queryCache\n        .getAll()\n        .find((query) => query.queryHash === activeQueryHash)\n        ?.isStale(),\n    ) ?? false\n\n  const observerCount =\n    useSubscribeToQueryCache(queryCache, () =>\n      queryCache\n        .getAll()\n        .find((query) => query.queryHash === activeQueryHash)\n        ?.getObserversCount(),\n    ) ?? 0\n\n  const handleRefetch = () => {\n    const promise = activeQuery?.fetch()\n    promise?.catch(noop)\n  }\n\n  const currentErrorTypeName = useMemo(() => {\n    if (activeQuery && activeQueryState?.error) {\n      const errorType = errorTypes.find(\n        (type) =>\n          type.initializer(activeQuery).toString() ===\n          activeQueryState.error?.toString(),\n      )\n      return errorType?.name\n    }\n    return undefined\n  }, [activeQuery, activeQueryState?.error, errorTypes])\n\n  if (!activeQuery || !activeQueryState) {\n    return null\n  }\n\n  const triggerError = (errorType?: DevToolsErrorType) => {\n    const error =\n      errorType?.initializer(activeQuery) ??\n      new Error('Unknown error from devtools')\n\n    const __previousQueryOptions = activeQuery.options\n\n    activeQuery.setState({\n      status: 'error',\n      error,\n      fetchMeta: {\n        ...activeQuery.state.fetchMeta,\n        __previousQueryOptions,\n      },\n    })\n  }\n\n  const restoreQueryAfterLoadingOrError = () => {\n    activeQuery.fetch(activeQuery.state.fetchMeta.__previousQueryOptions, {\n      // Make sure this fetch will cancel the previous one\n      cancelRefetch: true,\n    })\n  }\n\n  return (\n    <ActiveQueryPanel>\n      <div\n        style={{\n          padding: '.5em',\n          background: theme.backgroundAlt,\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        }}\n      >\n        Query Details\n      </div>\n      <div\n        style={{\n          padding: '.5em',\n        }}\n      >\n        <div\n          style={{\n            marginBottom: '.5em',\n            display: 'flex',\n            alignItems: 'flex-start',\n            justifyContent: 'space-between',\n          }}\n        >\n          <Code\n            style={{\n              lineHeight: '1.8em',\n            }}\n          >\n            <pre\n              style={{\n                margin: 0,\n                padding: 0,\n                overflow: 'auto',\n              }}\n            >\n              {displayValue(activeQuery.queryKey, true)}\n            </pre>\n          </Code>\n          <span\n            style={{\n              padding: '0.3em .6em',\n              borderRadius: '0.4em',\n              fontWeight: 'bold',\n              textShadow: '0 2px 10px black',\n              background: getQueryStatusColor({\n                queryState: activeQueryState,\n                isStale: isStale,\n                observerCount: observerCount,\n                theme,\n              }),\n              flexShrink: 0,\n            }}\n          >\n            {getQueryStatusLabel(activeQuery)}\n          </span>\n        </div>\n        <div\n          style={{\n            marginBottom: '.5em',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          Observers: <Code>{observerCount}</Code>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'space-between',\n          }}\n        >\n          Last Updated:{' '}\n          <Code>\n            {new Date(activeQueryState.dataUpdatedAt).toLocaleTimeString()}\n          </Code>\n        </div>\n      </div>\n      <div\n        style={{\n          background: theme.backgroundAlt,\n          padding: '.5em',\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        }}\n      >\n        Actions\n      </div>\n      <div\n        style={{\n          padding: '0.5em',\n          display: 'flex',\n          flexWrap: 'wrap',\n          gap: '0.5em',\n          alignItems: 'flex-end',\n        }}\n      >\n        <Button\n          type=\"button\"\n          onClick={handleRefetch}\n          disabled={activeQueryState.fetchStatus === 'fetching'}\n          style={{\n            background: theme.active,\n          }}\n        >\n          Refetch\n        </Button>{' '}\n        <Button\n          type=\"button\"\n          onClick={() => queryClient.invalidateQueries(activeQuery)}\n          style={{\n            background: theme.warning,\n            color: theme.inputTextColor,\n          }}\n        >\n          Invalidate\n        </Button>{' '}\n        <Button\n          type=\"button\"\n          onClick={() => queryClient.resetQueries(activeQuery)}\n          style={{\n            background: theme.gray,\n          }}\n        >\n          Reset\n        </Button>{' '}\n        <Button\n          type=\"button\"\n          onClick={() => queryClient.removeQueries(activeQuery)}\n          style={{\n            background: theme.danger,\n          }}\n        >\n          Remove\n        </Button>{' '}\n        <Button\n          type=\"button\"\n          onClick={() => {\n            // Return early if the query is already restoring\n            if (\n              activeQuery.state.fetchStatus === 'fetching' &&\n              typeof activeQuery.state.fetchMeta?.__previousQueryOptions ===\n                'undefined'\n            ) {\n              return\n            }\n\n            if (activeQuery.state.data === undefined) {\n              restoreQueryAfterLoadingOrError()\n            } else {\n              const __previousQueryOptions = activeQuery.options\n              // Trigger a fetch in order to trigger suspense as well.\n              activeQuery.fetch({\n                ...__previousQueryOptions,\n                queryFn: () => {\n                  return new Promise(() => {\n                    // Never resolve\n                  })\n                },\n                cacheTime: -1,\n              })\n              activeQuery.setState({\n                data: undefined,\n                status: 'loading',\n                fetchMeta: {\n                  ...activeQuery.state.fetchMeta,\n                  __previousQueryOptions,\n                },\n              })\n            }\n          }}\n          style={{\n            background: theme.paused,\n          }}\n        >\n          {activeQuery.state.status === 'loading' ? 'Restore' : 'Trigger'}{' '}\n          loading\n        </Button>{' '}\n        {errorTypes.length === 0 || activeQuery.state.status === 'error' ? (\n          <Button\n            type=\"button\"\n            onClick={() => {\n              if (!activeQuery.state.error) {\n                triggerError()\n              } else {\n                queryClient.resetQueries(activeQuery)\n              }\n            }}\n            style={{\n              background: theme.danger,\n            }}\n          >\n            {activeQuery.state.status === 'error' ? 'Restore' : 'Trigger'} error\n          </Button>\n        ) : (\n          <label>\n            Trigger error:\n            <Select\n              value={currentErrorTypeName ?? ''}\n              style={{ marginInlineStart: '.5em' }}\n              onChange={(e) => {\n                const errorType = errorTypes.find(\n                  (t) => t.name === e.target.value,\n                )\n\n                triggerError(errorType)\n              }}\n            >\n              <option key=\"\" value=\"\" />\n              {errorTypes.map((errorType) => (\n                <option key={errorType.name} value={errorType.name}>\n                  {errorType.name}\n                </option>\n              ))}\n            </Select>\n          </label>\n        )}\n      </div>\n      <div\n        style={{\n          background: theme.backgroundAlt,\n          padding: '.5em',\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        }}\n      >\n        Data Explorer\n      </div>\n      <div\n        style={{\n          padding: '.5em',\n        }}\n      >\n        <Explorer\n          label=\"Data\"\n          value={activeQueryState.data}\n          defaultExpanded={{}}\n          copyable\n        />\n      </div>\n      <div\n        style={{\n          background: theme.backgroundAlt,\n          padding: '.5em',\n          position: 'sticky',\n          top: 0,\n          zIndex: 1,\n        }}\n      >\n        Query Explorer\n      </div>\n      <div\n        style={{\n          padding: '.5em',\n        }}\n      >\n        <Explorer\n          label=\"Query\"\n          value={activeQuery}\n          defaultExpanded={{\n            queryKey: true,\n          }}\n        />\n      </div>\n    </ActiveQueryPanel>\n  )\n}\n\nconst QueryStatusCount = ({ queryCache }: { queryCache: QueryCache }) => {\n  const hasFresh = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().filter((q) => getQueryStatusLabel(q) === 'fresh')\n        .length,\n  )\n  const hasFetching = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().filter((q) => getQueryStatusLabel(q) === 'fetching')\n        .length,\n  )\n  const hasPaused = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().filter((q) => getQueryStatusLabel(q) === 'paused')\n        .length,\n  )\n  const hasStale = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().filter((q) => getQueryStatusLabel(q) === 'stale')\n        .length,\n  )\n  const hasInactive = useSubscribeToQueryCache(\n    queryCache,\n    () =>\n      queryCache.getAll().filter((q) => getQueryStatusLabel(q) === 'inactive')\n        .length,\n  )\n  return (\n    <QueryKeys>\n      <QueryKey\n        style={{\n          background: theme.success,\n          opacity: hasFresh ? 1 : 0.3,\n        }}\n      >\n        fresh <Code>({hasFresh})</Code>\n      </QueryKey>{' '}\n      <QueryKey\n        style={{\n          background: theme.active,\n          opacity: hasFetching ? 1 : 0.3,\n        }}\n      >\n        fetching <Code>({hasFetching})</Code>\n      </QueryKey>{' '}\n      <QueryKey\n        style={{\n          background: theme.paused,\n          opacity: hasPaused ? 1 : 0.3,\n        }}\n      >\n        paused <Code>({hasPaused})</Code>\n      </QueryKey>{' '}\n      <QueryKey\n        style={{\n          background: theme.warning,\n          color: 'black',\n          textShadow: '0',\n          opacity: hasStale ? 1 : 0.3,\n        }}\n      >\n        stale <Code>({hasStale})</Code>\n      </QueryKey>{' '}\n      <QueryKey\n        style={{\n          background: theme.gray,\n          opacity: hasInactive ? 1 : 0.3,\n        }}\n      >\n        inactive <Code>({hasInactive})</Code>\n      </QueryKey>\n    </QueryKeys>\n  )\n}\n\ninterface QueryRowProps {\n  queryKey: QueryKeyType\n  setActiveQueryHash: (hash: string) => void\n  activeQueryHash?: string\n  queryCache: QueryCache\n}\n\nconst QueryRow = React.memo(\n  ({\n    queryKey,\n    setActiveQueryHash,\n    activeQueryHash,\n    queryCache,\n  }: QueryRowProps) => {\n    const queryHash =\n      useSubscribeToQueryCache(\n        queryCache,\n        () => queryCache.find(queryKey)?.queryHash,\n      ) ?? ''\n\n    const queryState = useSubscribeToQueryCache(\n      queryCache,\n      () => queryCache.find(queryKey)?.state,\n    )\n\n    const isStale =\n      useSubscribeToQueryCache(queryCache, () =>\n        queryCache.find(queryKey)?.isStale(),\n      ) ?? false\n\n    const isDisabled =\n      useSubscribeToQueryCache(queryCache, () =>\n        queryCache.find(queryKey)?.isDisabled(),\n      ) ?? false\n\n    const observerCount =\n      useSubscribeToQueryCache(queryCache, () =>\n        queryCache.find(queryKey)?.getObserversCount(),\n      ) ?? 0\n\n    if (!queryState) {\n      return null\n    }\n\n    return (\n      <div\n        role=\"button\"\n        aria-label={`Open query details for ${queryHash}`}\n        onClick={() =>\n          setActiveQueryHash(activeQueryHash === queryHash ? '' : queryHash)\n        }\n        style={{\n          display: 'flex',\n          borderBottom: `solid 1px ${theme.grayAlt}`,\n          cursor: 'pointer',\n          background:\n            queryHash === activeQueryHash ? 'rgba(255,255,255,.1)' : undefined,\n        }}\n      >\n        <div\n          style={{\n            flex: '0 0 auto',\n            width: '2em',\n            height: '2em',\n            background: getQueryStatusColor({\n              queryState,\n              isStale,\n              observerCount,\n              theme,\n            }),\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center',\n            fontWeight: 'bold',\n            textShadow: isStale ? '0' : '0 0 10px black',\n            color: isStale ? 'black' : 'white',\n          }}\n        >\n          {observerCount}\n        </div>\n        {isDisabled ? (\n          <div\n            style={{\n              flex: '0 0 auto',\n              height: '2em',\n              background: theme.gray,\n              display: 'flex',\n              alignItems: 'center',\n              fontWeight: 'bold',\n              padding: '0 0.5em',\n            }}\n          >\n            disabled\n          </div>\n        ) : null}\n        <Code\n          style={{\n            padding: '.5em',\n          }}\n        >\n          {`${queryHash}`}\n        </Code>\n      </div>\n    )\n  },\n)\n\nQueryRow.displayName = 'QueryRow'\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nfunction noop() {}\n"]},"metadata":{},"sourceType":"module"}