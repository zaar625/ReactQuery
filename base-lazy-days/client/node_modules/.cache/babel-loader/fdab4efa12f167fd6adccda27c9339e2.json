{"ast":null,"code":"import { difference, replaceAt } from './utils.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { QueryObserver } from './queryObserver.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\nclass QueriesObserver extends Subscribable {\n  constructor(client, queries) {\n    super();\n    this.client = client;\n    this.queries = [];\n    this.result = [];\n    this.observers = [];\n    this.observersMap = {};\n    if (queries) {\n      this.setQueries(queries);\n    }\n  }\n  onSubscribe() {\n    if (this.listeners.size === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n    }\n  }\n  onUnsubscribe() {\n    if (!this.listeners.size) {\n      this.destroy();\n    }\n  }\n  destroy() {\n    this.listeners = new Set();\n    this.observers.forEach(observer => {\n      observer.destroy();\n    });\n  }\n  setQueries(queries, notifyOptions) {\n    this.queries = queries;\n    notifyManager.batch(() => {\n      const prevObservers = this.observers;\n      const newObserverMatches = this.findMatchingObservers(this.queries); // set options for the new observers to notify of changes\n\n      newObserverMatches.forEach(match => match.observer.setOptions(match.defaultedQueryOptions, notifyOptions));\n      const newObservers = newObserverMatches.map(match => match.observer);\n      const newObserversMap = Object.fromEntries(newObservers.map(observer => [observer.options.queryHash, observer]));\n      const newResult = newObservers.map(observer => observer.getCurrentResult());\n      const hasIndexChange = newObservers.some((observer, index) => observer !== prevObservers[index]);\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return;\n      }\n      this.observers = newObservers;\n      this.observersMap = newObserversMap;\n      this.result = newResult;\n      if (!this.hasListeners()) {\n        return;\n      }\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy();\n      });\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result);\n        });\n      });\n      this.notify();\n    });\n  }\n  getCurrentResult() {\n    return this.result;\n  }\n  getQueries() {\n    return this.observers.map(observer => observer.getCurrentQuery());\n  }\n  getObservers() {\n    return this.observers;\n  }\n  getOptimisticResult(queries) {\n    return this.findMatchingObservers(queries).map(match => match.observer.getOptimisticResult(match.defaultedQueryOptions));\n  }\n  findMatchingObservers(queries) {\n    const prevObservers = this.observers;\n    const prevObserversMap = new Map(prevObservers.map(observer => [observer.options.queryHash, observer]));\n    const defaultedQueryOptions = queries.map(options => this.client.defaultQueryOptions(options));\n    const matchingObservers = defaultedQueryOptions.flatMap(defaultedOptions => {\n      const match = prevObserversMap.get(defaultedOptions.queryHash);\n      if (match != null) {\n        return [{\n          defaultedQueryOptions: defaultedOptions,\n          observer: match\n        }];\n      }\n      return [];\n    });\n    const matchedQueryHashes = new Set(matchingObservers.map(match => match.defaultedQueryOptions.queryHash));\n    const unmatchedQueries = defaultedQueryOptions.filter(defaultedOptions => !matchedQueryHashes.has(defaultedOptions.queryHash));\n    const matchingObserversSet = new Set(matchingObservers.map(match => match.observer));\n    const unmatchedObservers = prevObservers.filter(prevObserver => !matchingObserversSet.has(prevObserver));\n    const getObserver = options => {\n      const defaultedOptions = this.client.defaultQueryOptions(options);\n      const currentObserver = this.observersMap[defaultedOptions.queryHash];\n      return currentObserver != null ? currentObserver : new QueryObserver(this.client, defaultedOptions);\n    };\n    const newOrReusedObservers = unmatchedQueries.map((options, index) => {\n      if (options.keepPreviousData) {\n        // return previous data from one of the observers that no longer match\n        const previouslyUsedObserver = unmatchedObservers[index];\n        if (previouslyUsedObserver !== undefined) {\n          return {\n            defaultedQueryOptions: options,\n            observer: previouslyUsedObserver\n          };\n        }\n      }\n      return {\n        defaultedQueryOptions: options,\n        observer: getObserver(options)\n      };\n    });\n    const sortMatchesByOrderOfQueries = (a, b) => defaultedQueryOptions.indexOf(a.defaultedQueryOptions) - defaultedQueryOptions.indexOf(b.defaultedQueryOptions);\n    return matchingObservers.concat(newOrReusedObservers).sort(sortMatchesByOrderOfQueries);\n  }\n  onUpdate(observer, result) {\n    const index = this.observers.indexOf(observer);\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result);\n      this.notify();\n    }\n  }\n  notify() {\n    notifyManager.batch(() => {\n      this.listeners.forEach(_ref => {\n        let {\n          listener\n        } = _ref;\n        listener(this.result);\n      });\n    });\n  }\n}\nexport { QueriesObserver };","map":{"version":3,"sources":["../../src/queriesObserver.ts"],"names":["QueriesObserver","Subscribable","constructor","client","queries","result","observers","observersMap","setQueries","onSubscribe","listeners","size","forEach","observer","subscribe","onUpdate","onUnsubscribe","destroy","Set","notifyOptions","notifyManager","batch","prevObservers","newObserverMatches","findMatchingObservers","match","setOptions","defaultedQueryOptions","newObservers","map","newObserversMap","Object","fromEntries","options","queryHash","newResult","getCurrentResult","hasIndexChange","some","index","length","hasListeners","difference","notify","getQueries","getCurrentQuery","getObservers","getOptimisticResult","prevObserversMap","Map","defaultQueryOptions","matchingObservers","flatMap","defaultedOptions","get","matchedQueryHashes","unmatchedQueries","filter","has","matchingObserversSet","unmatchedObservers","prevObserver","getObserver","currentObserver","QueryObserver","newOrReusedObservers","keepPreviousData","previouslyUsedObserver","undefined","sortMatchesByOrderOfQueries","a","b","indexOf","concat","sort","replaceAt","listener"],"mappings":"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","sourcesContent":["import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  QueryObserverOptions,\n  QueryObserverResult,\n  DefaultedQueryObserverOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { NotifyOptions } from './queryObserver'\nimport { QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.size === 1) {\n      this.observers.forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.size) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = new Set()\n    this.observers.forEach((observer) => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions,\n  ): void {\n    this.queries = queries\n\n    notifyManager.batch(() => {\n      const prevObservers = this.observers\n\n      const newObserverMatches = this.findMatchingObservers(this.queries)\n\n      // set options for the new observers to notify of changes\n      newObserverMatches.forEach((match) =>\n        match.observer.setOptions(match.defaultedQueryOptions, notifyOptions),\n      )\n\n      const newObservers = newObserverMatches.map((match) => match.observer)\n      const newObserversMap = Object.fromEntries(\n        newObservers.map((observer) => [observer.options.queryHash, observer]),\n      )\n      const newResult = newObservers.map((observer) =>\n        observer.getCurrentResult(),\n      )\n\n      const hasIndexChange = newObservers.some(\n        (observer, index) => observer !== prevObservers[index],\n      )\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach((observer) => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach((observer) => {\n        observer.subscribe((result) => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getQueries() {\n    return this.observers.map((observer) => observer.getCurrentQuery())\n  }\n\n  getObservers() {\n    return this.observers\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return this.findMatchingObservers(queries).map((match) =>\n      match.observer.getOptimisticResult(match.defaultedQueryOptions),\n    )\n  }\n\n  private findMatchingObservers(\n    queries: QueryObserverOptions[],\n  ): QueryObserverMatch[] {\n    const prevObservers = this.observers\n    const prevObserversMap = new Map(\n      prevObservers.map((observer) => [observer.options.queryHash, observer]),\n    )\n\n    const defaultedQueryOptions = queries.map((options) =>\n      this.client.defaultQueryOptions(options),\n    )\n\n    const matchingObservers: QueryObserverMatch[] =\n      defaultedQueryOptions.flatMap((defaultedOptions) => {\n        const match = prevObserversMap.get(defaultedOptions.queryHash)\n        if (match != null) {\n          return [{ defaultedQueryOptions: defaultedOptions, observer: match }]\n        }\n        return []\n      })\n\n    const matchedQueryHashes = new Set(\n      matchingObservers.map((match) => match.defaultedQueryOptions.queryHash),\n    )\n    const unmatchedQueries = defaultedQueryOptions.filter(\n      (defaultedOptions) => !matchedQueryHashes.has(defaultedOptions.queryHash),\n    )\n\n    const matchingObserversSet = new Set(\n      matchingObservers.map((match) => match.observer),\n    )\n    const unmatchedObservers = prevObservers.filter(\n      (prevObserver) => !matchingObserversSet.has(prevObserver),\n    )\n\n    const getObserver = (options: QueryObserverOptions): QueryObserver => {\n      const defaultedOptions = this.client.defaultQueryOptions(options)\n      const currentObserver = this.observersMap[defaultedOptions.queryHash!]\n      return currentObserver ?? new QueryObserver(this.client, defaultedOptions)\n    }\n\n    const newOrReusedObservers: QueryObserverMatch[] = unmatchedQueries.map(\n      (options, index) => {\n        if (options.keepPreviousData) {\n          // return previous data from one of the observers that no longer match\n          const previouslyUsedObserver = unmatchedObservers[index]\n          if (previouslyUsedObserver !== undefined) {\n            return {\n              defaultedQueryOptions: options,\n              observer: previouslyUsedObserver,\n            }\n          }\n        }\n        return {\n          defaultedQueryOptions: options,\n          observer: getObserver(options),\n        }\n      },\n    )\n\n    const sortMatchesByOrderOfQueries = (\n      a: QueryObserverMatch,\n      b: QueryObserverMatch,\n    ): number =>\n      defaultedQueryOptions.indexOf(a.defaultedQueryOptions) -\n      defaultedQueryOptions.indexOf(b.defaultedQueryOptions)\n\n    return matchingObservers\n      .concat(newOrReusedObservers)\n      .sort(sortMatchesByOrderOfQueries)\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(({ listener }) => {\n        listener(this.result)\n      })\n    })\n  }\n}\n\ntype QueryObserverMatch = {\n  defaultedQueryOptions: DefaultedQueryObserverOptions\n  observer: QueryObserver\n}\n"]},"metadata":{},"sourceType":"module"}