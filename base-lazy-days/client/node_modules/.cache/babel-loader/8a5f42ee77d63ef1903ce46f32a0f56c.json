{"ast":null,"code":"import { getDefaultState } from './mutation.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Subscribable } from './subscribable.esm.js';\nimport { shallowEqualObjects } from './utils.esm.js';\n\n// CLASS\nclass MutationObserver extends Subscribable {\n  constructor(client, options) {\n    super();\n    this.client = client;\n    this.setOptions(options);\n    this.bindMethods();\n    this.updateResult();\n  }\n  bindMethods() {\n    this.mutate = this.mutate.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n  setOptions(options) {\n    var _this$currentMutation;\n    const prevOptions = this.options;\n    this.options = this.client.defaultMutationOptions(options);\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this\n      });\n    }\n    (_this$currentMutation = this.currentMutation) == null ? void 0 : _this$currentMutation.setOptions(this.options);\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$currentMutation2;\n      (_this$currentMutation2 = this.currentMutation) == null ? void 0 : _this$currentMutation2.removeObserver(this);\n    }\n  }\n  onMutationUpdate(action) {\n    this.updateResult(); // Determine which callbacks to trigger\n\n    const notifyOptions = {\n      listeners: true\n    };\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true;\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true;\n    }\n    this.notify(notifyOptions);\n  }\n  getCurrentResult() {\n    return this.currentResult;\n  }\n  reset() {\n    this.currentMutation = undefined;\n    this.updateResult();\n    this.notify({\n      listeners: true\n    });\n  }\n  mutate(variables, options) {\n    this.mutateOptions = options;\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this);\n    }\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables: typeof variables !== 'undefined' ? variables : this.options.variables\n    });\n    this.currentMutation.addObserver(this);\n    return this.currentMutation.execute();\n  }\n  updateResult() {\n    const state = this.currentMutation ? this.currentMutation.state : getDefaultState();\n    const result = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset\n    };\n    this.currentResult = result;\n  }\n  notify(options) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          var _this$mutateOptions$o, _this$mutateOptions, _this$mutateOptions$o2, _this$mutateOptions2;\n          (_this$mutateOptions$o = (_this$mutateOptions = this.mutateOptions).onSuccess) == null ? void 0 : _this$mutateOptions$o.call(_this$mutateOptions, this.currentResult.data, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o2 = (_this$mutateOptions2 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o2.call(_this$mutateOptions2, this.currentResult.data, null, this.currentResult.variables, this.currentResult.context);\n        } else if (options.onError) {\n          var _this$mutateOptions$o3, _this$mutateOptions3, _this$mutateOptions$o4, _this$mutateOptions4;\n          (_this$mutateOptions$o3 = (_this$mutateOptions3 = this.mutateOptions).onError) == null ? void 0 : _this$mutateOptions$o3.call(_this$mutateOptions3, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n          (_this$mutateOptions$o4 = (_this$mutateOptions4 = this.mutateOptions).onSettled) == null ? void 0 : _this$mutateOptions$o4.call(_this$mutateOptions4, undefined, this.currentResult.error, this.currentResult.variables, this.currentResult.context);\n        }\n      } // Then trigger the listeners\n\n      if (options.listeners) {\n        this.listeners.forEach(_ref => {\n          let {\n            listener\n          } = _ref;\n          listener(this.currentResult);\n        });\n      }\n    });\n  }\n}\nexport { MutationObserver };","map":{"version":3,"sources":["../../src/mutationObserver.ts"],"names":["MutationObserver","Subscribable","constructor","client","options","setOptions","bindMethods","updateResult","mutate","bind","reset","prevOptions","defaultMutationOptions","shallowEqualObjects","getMutationCache","notify","type","mutation","currentMutation","observer","onUnsubscribe","hasListeners","removeObserver","onMutationUpdate","action","notifyOptions","listeners","onSuccess","onError","getCurrentResult","currentResult","undefined","variables","mutateOptions","build","addObserver","execute","state","getDefaultState","result","isLoading","status","isSuccess","isError","isIdle","notifyManager","batch","data","context","onSettled","error","forEach","listener"],"mappings":"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","sourcesContent":["import type { Action, Mutation } from './mutation'\nimport { getDefaultState } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverBaseResult,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\nimport { shallowEqualObjects } from './utils'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>,\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>,\n  ) {\n    const prevOptions = this.options\n    this.options = this.client.defaultMutationOptions(options)\n    if (!shallowEqualObjects(prevOptions, this.options)) {\n      this.client.getMutationCache().notify({\n        type: 'observerOptionsUpdated',\n        mutation: this.currentMutation,\n        observer: this,\n      })\n    }\n    this.currentMutation?.setOptions(this.options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.hasListeners()) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>,\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    const result: MutationObserverBaseResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    > = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n\n    this.currentResult = result as MutationObserverResult<\n      TData,\n      TError,\n      TVariables,\n      TContext\n    >\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions && this.hasListeners()) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!,\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context,\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(({ listener }) => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}