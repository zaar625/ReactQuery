{"ast":null,"code":"import { isValidTimeout, isServer } from './utils.esm.js';\nclass Removable {\n  destroy() {\n    this.clearGcTimeout();\n  }\n  scheduleGc() {\n    this.clearGcTimeout();\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove();\n      }, this.cacheTime);\n    }\n  }\n  updateCacheTime(newCacheTime) {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(this.cacheTime || 0, newCacheTime != null ? newCacheTime : isServer ? Infinity : 5 * 60 * 1000);\n  }\n  clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout);\n      this.gcTimeout = undefined;\n    }\n  }\n}\nexport { Removable };","map":{"version":3,"sources":["../../src/removable.ts"],"names":["Removable","destroy","clearGcTimeout","scheduleGc","isValidTimeout","cacheTime","gcTimeout","setTimeout","optionalRemove","updateCacheTime","newCacheTime","Math","max","isServer","Infinity","clearTimeout","undefined"],"mappings":";AAEO,MAAeA,SAAf,CAAyB;EAI9BC,OAAO,CAAA,EAAS;IACd,IAAA,CAAKC,cAAL,CAAA,CAAA;EACD;EAESC,UAAU,CAAA,EAAS;IAC3B,IAAA,CAAKD,cAAL,CAAA,CAAA;IAEA,IAAIE,cAAc,CAAC,IAAKC,CAAAA,SAAN,CAAlB,EAAoC;MAClC,IAAA,CAAKC,SAAL,GAAiBC,UAAU,CAAC,MAAM;QAChC,IAAA,CAAKC,cAAL,CAAA,CAAA;OADyB,EAExB,IAAKH,CAAAA,SAFmB,CAA3B;IAGD;EACF;EAESI,eAAe,CAACC,YAAD,EAAyC;IAChE;IACA,IAAKL,CAAAA,SAAL,GAAiBM,IAAI,CAACC,GAALD,CACf,IAAA,CAAKN,SAAL,IAAkB,CADHM,EAEfD,YAFeC,IAEfD,IAAAA,GAAAA,YAFeC,GAEEE,QAAQ,GAAGC,QAAH,GAAc,CAAI,GAAA,EAAJ,GAAS,IAFjCH,CAAjB;EAID;EAEST,cAAc,CAAA,EAAG;IACzB,IAAI,IAAA,CAAKI,SAAT,EAAoB;MAClBS,YAAY,CAAC,IAAKT,CAAAA,SAAN,CAAZS;MACA,IAAKT,CAAAA,SAAL,GAAiBU,SAAjB;IACD;EACF;AA/B6B","sourcesContent":["import { isServer, isValidTimeout } from './utils'\n\nexport abstract class Removable {\n  cacheTime!: number\n  private gcTimeout?: ReturnType<typeof setTimeout>\n\n  destroy(): void {\n    this.clearGcTimeout()\n  }\n\n  protected scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  protected updateCacheTime(newCacheTime: number | undefined): void {\n    // Default to 5 minutes (Infinity for server-side) if no cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      newCacheTime ?? (isServer ? Infinity : 5 * 60 * 1000),\n    )\n  }\n\n  protected clearGcTimeout() {\n    if (this.gcTimeout) {\n      clearTimeout(this.gcTimeout)\n      this.gcTimeout = undefined\n    }\n  }\n\n  protected abstract optionalRemove(): void\n}\n"]},"metadata":{},"sourceType":"module"}