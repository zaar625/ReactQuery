{"ast":null,"code":"import { Subscribable } from './subscribable.esm.js';\nimport { isServer } from './utils.esm.js';\nconst onlineEvents = ['online', 'offline'];\nclass OnlineManager extends Subscribable {\n  constructor() {\n    super();\n    this.setup = onOnline => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline(); // Listen to online\n\n        onlineEvents.forEach(event => {\n          window.addEventListener(event, listener, false);\n        });\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach(event => {\n            window.removeEventListener(event, listener);\n          });\n        };\n      }\n      return;\n    };\n  }\n  onSubscribe() {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup);\n    }\n  }\n  onUnsubscribe() {\n    if (!this.hasListeners()) {\n      var _this$cleanup;\n      (_this$cleanup = this.cleanup) == null ? void 0 : _this$cleanup.call(this);\n      this.cleanup = undefined;\n    }\n  }\n  setEventListener(setup) {\n    var _this$cleanup2;\n    this.setup = setup;\n    (_this$cleanup2 = this.cleanup) == null ? void 0 : _this$cleanup2.call(this);\n    this.cleanup = setup(online => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online);\n      } else {\n        this.onOnline();\n      }\n    });\n  }\n  setOnline(online) {\n    this.online = online;\n    if (online) {\n      this.onOnline();\n    }\n  }\n  onOnline() {\n    this.listeners.forEach(_ref => {\n      let {\n        listener\n      } = _ref;\n      listener();\n    });\n  }\n  isOnline() {\n    if (typeof this.online === 'boolean') {\n      return this.online;\n    }\n    if (typeof navigator === 'undefined' || typeof navigator.onLine === 'undefined') {\n      return true;\n    }\n    return navigator.onLine;\n  }\n}\nconst onlineManager = new OnlineManager();\nexport { OnlineManager, onlineManager };","map":{"version":3,"sources":["../../src/onlineManager.ts"],"names":["onlineEvents","OnlineManager","Subscribable","constructor","setup","onOnline","isServer","window","addEventListener","listener","forEach","event","removeEventListener","onSubscribe","cleanup","setEventListener","onUnsubscribe","hasListeners","undefined","online","setOnline","listeners","isOnline","navigator","onLine","onlineManager"],"mappings":";;AAOA,MAAMA,YAAY,GAAG,CAAC,QAAD,EAAW,SAAX,CAArB;AAEO,MAAMC,aAAN,SAA4BC,YAA5B,CAAyC;EAM9CC,WAAW,CAAA,EAAG;IACZ,KAAA,CAAA,CAAA;IACA,IAAKC,CAAAA,KAAL,GAAcC,QAAD,IAAc;MACzB;MACA;MACA,IAAI,CAACC,QAAD,IAAaC,MAAM,CAACC,gBAAxB,EAA0C;QACxC,MAAMC,QAAQ,GAAG,CAAA,KAAMJ,QAAQ,CAAA,CAA/B,CADwC,CAAA;;QAGxCL,YAAY,CAACU,OAAbV,CAAsBW,KAAD,IAAW;UAC9BJ,MAAM,CAACC,gBAAPD,CAAwBI,KAAxBJ,EAA+BE,QAA/BF,EAAyC,KAAzCA,CAAAA;SADFP,CAAAA;QAIA,OAAO,MAAM;UACX;UACAA,YAAY,CAACU,OAAbV,CAAsBW,KAAD,IAAW;YAC9BJ,MAAM,CAACK,mBAAPL,CAA2BI,KAA3BJ,EAAkCE,QAAlCF,CAAAA;WADFP,CAAAA;SAFF;MAMD;MAED;KAlBF;EAoBD;EAESa,WAAW,CAAA,EAAS;IAC5B,IAAI,CAAC,IAAKC,CAAAA,OAAV,EAAmB;MACjB,IAAKC,CAAAA,gBAAL,CAAsB,IAAA,CAAKX,KAA3B,CAAA;IACD;EACF;EAESY,aAAa,CAAA,EAAG;IACxB,IAAI,CAAC,IAAA,CAAKC,YAAL,CAAA,CAAL,EAA0B;MAAA,IAAA,aAAA;MACxB,CAAA,aAAA,GAAA,IAAA,CAAKH,OAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,aAAA,CAAA,IAAA,CAAA,IAAA,CAAA;MACA,IAAKA,CAAAA,OAAL,GAAeI,SAAf;IACD;EACF;EAEDH,gBAAgB,CAACX,KAAD,EAAuB;IAAA,IAAA,cAAA;IACrC,IAAKA,CAAAA,KAAL,GAAaA,KAAb;IACA,CAAA,cAAA,GAAA,IAAA,CAAKU,OAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,IAAA,CAAA,IAAA,CAAA;IACA,IAAA,CAAKA,OAAL,GAAeV,KAAK,CAAEe,MAAD,IAAsB;MACzC,IAAI,OAAOA,MAAP,KAAkB,SAAtB,EAAiC;QAC/B,IAAKC,CAAAA,SAAL,CAAeD,MAAf,CAAA;MACD,CAFD,MAEO;QACL,IAAA,CAAKd,QAAL,CAAA,CAAA;MACD;IACF,CANmB,CAApB;EAOD;EAEDe,SAAS,CAACD,MAAD,EAAyB;IAChC,IAAKA,CAAAA,MAAL,GAAcA,MAAd;IAEA,IAAIA,MAAJ,EAAY;MACV,IAAA,CAAKd,QAAL,CAAA,CAAA;IACD;EACF;EAEDA,QAAQ,CAAA,EAAS;IACf,IAAA,CAAKgB,SAAL,CAAeX,OAAf,CAAuB,IAAA,IAAkB;MAAA,IAAjB;QAAED;MAAF,CAAD,GAAA,IAAA;MACrBA,QAAQ,CAAA,CAAA;KADV,CAAA;EAGD;EAEDa,QAAQ,CAAA,EAAY;IAClB,IAAI,OAAO,IAAA,CAAKH,MAAZ,KAAuB,SAA3B,EAAsC;MACpC,OAAO,IAAA,CAAKA,MAAZ;IACD;IAED,IACE,OAAOI,SAAP,KAAqB,WAArB,IACA,OAAOA,SAAS,CAACC,MAAjB,KAA4B,WAF9B,EAGE;MACA,OAAO,IAAP;IACD;IAED,OAAOD,SAAS,CAACC,MAAjB;EACD;AAlF6C;AAqFnCC,MAAAA,aAAa,GAAG,IAAIxB,aAAJ,CAAA,CAAA","sourcesContent":["import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\ntype SetupFn = (\n  setOnline: (online?: boolean) => void,\n) => (() => void) | undefined\n\nconst onlineEvents = ['online', 'offline'] as const\n\nexport class OnlineManager extends Subscribable {\n  private online?: boolean\n  private cleanup?: () => void\n\n  private setup: SetupFn\n\n  constructor() {\n    super()\n    this.setup = (onOnline) => {\n      // addEventListener does not exist in React Native, but window does\n      // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n      if (!isServer && window.addEventListener) {\n        const listener = () => onOnline()\n        // Listen to online\n        onlineEvents.forEach((event) => {\n          window.addEventListener(event, listener, false)\n        })\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          onlineEvents.forEach((event) => {\n            window.removeEventListener(event, listener)\n          })\n        }\n      }\n\n      return\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (!this.cleanup) {\n      this.setEventListener(this.setup)\n    }\n  }\n\n  protected onUnsubscribe() {\n    if (!this.hasListeners()) {\n      this.cleanup?.()\n      this.cleanup = undefined\n    }\n  }\n\n  setEventListener(setup: SetupFn): void {\n    this.setup = setup\n    this.cleanup?.()\n    this.cleanup = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(({ listener }) => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n"]},"metadata":{},"sourceType":"module"}