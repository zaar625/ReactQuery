{"ast":null,"code":"export var escapeKey = function (key) {\n  return key.replace(/\\./g, '\\\\.');\n};\nexport var stringifyPath = function (path) {\n  return path.map(String).map(escapeKey).join('.');\n};\nexport var parsePath = function (string) {\n  var result = [];\n  var segment = '';\n  for (var i = 0; i < string.length; i++) {\n    var char = string.charAt(i);\n    var isEscapedDot = char === '\\\\' && string.charAt(i + 1) === '.';\n    if (isEscapedDot) {\n      segment += '.';\n      i++;\n      continue;\n    }\n    var isEndOfSegment = char === '.';\n    if (isEndOfSegment) {\n      result.push(segment);\n      segment = '';\n      continue;\n    }\n    segment += char;\n  }\n  var lastSegment = segment;\n  result.push(lastSegment);\n  return result;\n};","map":{"version":3,"sources":["../../src/pathstringifier.ts"],"names":[],"mappings":"AAGA,OAAO,IAAM,SAAS,GAAG,SAAA,CAAC,GAAW,EAAA;EAAK,OAAA,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;AAAzB,CAAyB;AAEnE,OAAO,IAAM,aAAa,GAAG,SAAA,CAAC,IAAU,EAAA;EACtC,OAAA,IAAI,CACD,GAAG,CAAC,MAAM,CAAC,CACX,GAAG,CAAC,SAAS,CAAC,CACd,IAAI,CAAC,GAAG,CAAC;AAHZ,CAGY;AAEd,OAAO,IAAM,SAAS,GAAG,SAAA,CAAC,MAAuB,EAAA;EAC/C,IAAM,MAAM,GAAa,EAAE;EAE3B,IAAI,OAAO,GAAG,EAAE;EAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;IACtC,IAAI,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IAE3B,IAAM,YAAY,GAAG,IAAI,KAAK,IAAI,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG;IAClE,IAAI,YAAY,EAAE;MAChB,OAAO,IAAI,GAAG;MACd,CAAC,EAAE;MACH;IACD;IAED,IAAM,cAAc,GAAG,IAAI,KAAK,GAAG;IACnC,IAAI,cAAc,EAAE;MAClB,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;MACpB,OAAO,GAAG,EAAE;MACZ;IACD;IAED,OAAO,IAAI,IAAI;EAChB;EAED,IAAM,WAAW,GAAG,OAAO;EAC3B,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;EAExB,OAAO,MAAM;AACf,CAAC","sourceRoot":"","sourcesContent":["export var escapeKey = function (key) { return key.replace(/\\./g, '\\\\.'); };\nexport var stringifyPath = function (path) {\n    return path\n        .map(String)\n        .map(escapeKey)\n        .join('.');\n};\nexport var parsePath = function (string) {\n    var result = [];\n    var segment = '';\n    for (var i = 0; i < string.length; i++) {\n        var char = string.charAt(i);\n        var isEscapedDot = char === '\\\\' && string.charAt(i + 1) === '.';\n        if (isEscapedDot) {\n            segment += '.';\n            i++;\n            continue;\n        }\n        var isEndOfSegment = char === '.';\n        if (isEndOfSegment) {\n            result.push(segment);\n            segment = '';\n            continue;\n        }\n        segment += char;\n    }\n    var lastSegment = segment;\n    result.push(lastSegment);\n    return result;\n};\n//# sourceMappingURL=pathstringifier.js.map"]},"metadata":{},"sourceType":"module"}