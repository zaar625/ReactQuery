{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { parseFilterArgs, notifyManager } from '@tanstack/query-core';\nimport { useSyncExternalStore } from './useSyncExternalStore.esm.js';\nimport { useQueryClient } from './QueryClientProvider.esm.js';\nfunction useIsFetching(arg1, arg2, arg3) {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3);\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const queryCache = queryClient.getQueryCache();\n  return useSyncExternalStore(React.useCallback(onStoreChange => queryCache.subscribe(notifyManager.batchCalls(onStoreChange)), [queryCache]), () => queryClient.isFetching(filters), () => queryClient.isFetching(filters));\n}\nexport { useIsFetching };","map":{"version":3,"sources":["../../src/useIsFetching.ts"],"names":[],"mappings":";;;;;;AAiBO,SAAA,aAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA;EAKL,MAAA,CAAA,OAAA,EAAA,OAAA,GAAA,CAAA,CAAA,CAAA,GAAA,eAAA,CAAA,IAAA,EAAA,IAAA,EAAA,IAAA,CAAA;;;EACmC,CAAA,CAAA;EACnC,MAAA,UAAA,GAAA,WAAA,CAAA,aAAA,CAAA,CAAA;EAEA,OAAA,oBAAA,CAAA,KAAA,CAAA,WAAA,CAAA,aAAA,IAAA,UAAA,CAAA,SAAA,CAAA,aAAA,CAAA,UAAA,CAAA,aAAA,CAAA,CAAA,EAAA,CAAA,UAAA,CAAA,CAAA,EAAA,MAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA,EAAA,MAAA,WAAA,CAAA,UAAA,CAAA,OAAA,CAAA,CAAA;AASD","sourcesContent":["'use client'\nimport * as React from 'react'\nimport type { QueryKey, QueryFilters } from '@tanstack/query-core'\nimport { notifyManager, parseFilterArgs } from '@tanstack/query-core'\n\nimport { useSyncExternalStore } from './useSyncExternalStore'\nimport type { ContextOptions } from './types'\nimport { useQueryClient } from './QueryClientProvider'\n\ninterface Options extends ContextOptions {}\n\nexport function useIsFetching(filters?: QueryFilters, options?: Options): number\nexport function useIsFetching(\n  queryKey?: QueryKey,\n  filters?: QueryFilters,\n  options?: Options,\n): number\nexport function useIsFetching(\n  arg1?: QueryKey | QueryFilters,\n  arg2?: QueryFilters | Options,\n  arg3?: Options,\n): number {\n  const [filters, options = {}] = parseFilterArgs(arg1, arg2, arg3)\n  const queryClient = useQueryClient({ context: options.context })\n  const queryCache = queryClient.getQueryCache()\n\n  return useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        queryCache.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [queryCache],\n    ),\n    () => queryClient.isFetching(filters),\n    () => queryClient.isFetching(filters),\n  )\n}\n"]},"metadata":{},"sourceType":"module"}