{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { hydrate } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.esm.js';\nfunction useHydrate(state) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const optionsRef = React.useRef(options);\n  optionsRef.current = options; // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current);\n    }\n  }, [queryClient, state]);\n}\nconst Hydrate = _ref => {\n  let {\n    children,\n    options,\n    state\n  } = _ref;\n  useHydrate(state, options);\n  return children;\n};\nexport { Hydrate, useHydrate };","map":{"version":3,"sources":["../../src/Hydrate.tsx"],"names":["optionsRef","state","useHydrate"],"mappings":";;;;;AAQO,SAAA,UAAA,CAAA,KAAA,EAAA;EAAA,IAAA,OAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAA,CAAA,CAAA;;;EAI8B,CAAA,CAAA;EAEnC,MAAA,UAAA,GAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA;EACAA,UAAAA,CAAAA,OAAAA,GAAAA,OAAAA,CAAAA,CAAAA;EAGA;EACA;EACA;;;IAEE,IAAA,KAAA,EAAA;;IAEC;EACF,CAAA,EAAA,CAAA,WAAA,EAAA,KAAA,CAAA,CAAA;AACF;AAQM,MAAA,OAAA,GAAA,IAAA,IAAiB;EAAA,IAAjB;;;IAAsCC;EAArB,CAAA,GAAA,IAAA;EACtBC,UAAAA,CAAAA,KAAAA,EAAAA,OAAAA,CAAAA;EACA,OAAA,QAAA;AACD,CAAA","sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport type { HydrateOptions } from '@tanstack/query-core'\nimport { hydrate } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { ContextOptions } from './types'\n\nexport function useHydrate(\n  state: unknown,\n  options: HydrateOptions & ContextOptions = {},\n) {\n  const queryClient = useQueryClient({ context: options.context })\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n  children?: React.ReactNode\n}\n\nexport const Hydrate = ({ children, options, state }: HydrateProps) => {\n  useHydrate(state, options)\n  return children as React.ReactElement\n}\n"]},"metadata":{},"sourceType":"module"}