{"ast":null,"code":"'use client';\n\nimport { extends as _extends } from './_virtual/_rollupPluginBabelHelpers.esm.js';\nimport * as React from 'react';\nimport { displayValue, styled } from './utils.esm.js';\nimport SuperJSON from 'superjson';\nconst Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word'\n});\nconst Label = styled('span', {\n  color: 'white'\n});\nconst LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white'\n});\nconst ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0\n});\nconst CopyButton = _ref => {\n  let {\n    value\n  } = _ref;\n  const [copyState, setCopyState] = React.useState('NoCopy');\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: copyState === 'NoCopy' ? () => {\n      navigator.clipboard.writeText(SuperJSON.stringify(value)).then(() => {\n        setCopyState('SuccessCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      }, err => {\n        console.error('Failed to copy: ', err);\n        setCopyState('ErrorCopy');\n        setTimeout(() => {\n          setCopyState('NoCopy');\n        }, 1500);\n      });\n    } : undefined,\n    style: {\n      cursor: 'pointer',\n      color: 'inherit',\n      font: 'inherit',\n      outline: 'inherit',\n      background: 'transparent',\n      border: 'none',\n      padding: 0\n    }\n  }, copyState === 'NoCopy' ? /*#__PURE__*/React.createElement(Copier, null) : copyState === 'SuccessCopy' ? /*#__PURE__*/React.createElement(CopiedCopier, null) : /*#__PURE__*/React.createElement(ErrorCopier, null));\n};\nconst Value = styled('span', (_props, theme) => ({\n  color: theme.danger\n}));\nconst SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)'\n});\nconst Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em'\n});\nconst Expander = _ref2 => {\n  let {\n    expanded,\n    style = {}\n  } = _ref2;\n  return /*#__PURE__*/React.createElement(\"span\", {\n    style: {\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: \"rotate(\" + (expanded ? 90 : 0) + \"deg) \" + (style.transform || ''),\n      ...style\n    }\n  }, \"\\u25B6\");\n};\nconst Copier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Copy object to clipboard\",\n  title: \"Copy object to clipboard\",\n  style: {\n    paddingLeft: '1em'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n}), /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"currentColor\",\n  d: \"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n})));\nconst ErrorCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Failed copying to clipboard\",\n  title: \"Failed copying to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'flex',\n    alignItems: 'center'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"12\",\n  viewBox: \"0 0 16 12\",\n  width: \"10\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"red\",\n  d: \"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n})), /*#__PURE__*/React.createElement(\"span\", {\n  style: {\n    color: 'red',\n    fontSize: '12px',\n    paddingLeft: '4px',\n    position: 'relative',\n    top: '2px'\n  }\n}, \"See console\"));\nconst CopiedCopier = () => /*#__PURE__*/React.createElement(\"span\", {\n  \"aria-label\": \"Object copied to clipboard\",\n  title: \"Object copied to clipboard\",\n  style: {\n    paddingLeft: '1em',\n    display: 'inline-block',\n    verticalAlign: 'middle'\n  }\n}, /*#__PURE__*/React.createElement(\"svg\", {\n  height: \"16\",\n  viewBox: \"0 0 16 16\",\n  width: \"16\",\n  display: \"block\"\n}, /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"green\",\n  d: \"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n})));\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nfunction chunkArray(array, size) {\n  if (size < 1) return [];\n  let i = 0;\n  const result = [];\n  while (i < array.length) {\n    result.push(array.slice(i, i + size));\n    i = i + size;\n  }\n  return result;\n}\nconst DefaultRenderer = _ref3 => {\n  let {\n    handleEntry,\n    label,\n    value,\n    subEntries = [],\n    subEntryPages = [],\n    type,\n    expanded = false,\n    copyable = false,\n    toggleExpanded,\n    pageSize\n  } = _ref3;\n  const [expandedPages, setExpandedPages] = React.useState([]);\n  return /*#__PURE__*/React.createElement(Entry, {\n    key: label\n  }, subEntryPages.length ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ExpandButton, {\n    onClick: () => toggleExpanded()\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" \", label, ' ', /*#__PURE__*/React.createElement(Info, null, String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : '', subEntries.length, \" \", subEntries.length > 1 ? \"items\" : \"item\")), copyable ? /*#__PURE__*/React.createElement(CopyButton, {\n    value: value\n  }) : null, expanded ? subEntryPages.length === 1 ? /*#__PURE__*/React.createElement(SubEntries, null, subEntries.map(handleEntry)) : /*#__PURE__*/React.createElement(SubEntries, null, subEntryPages.map((entries, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index\n  }, /*#__PURE__*/React.createElement(Entry, null, /*#__PURE__*/React.createElement(LabelButton, {\n    onClick: () => setExpandedPages(old => old.includes(index) ? old.filter(d => d !== index) : [...old, index])\n  }, /*#__PURE__*/React.createElement(Expander, {\n    expanded: expanded\n  }), \" [\", index * pageSize, \" ...\", ' ', index * pageSize + pageSize - 1, \"]\"), expandedPages.includes(index) ? /*#__PURE__*/React.createElement(SubEntries, null, entries.map(handleEntry)) : null)))) : null) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Label, null, label, \":\"), \" \", /*#__PURE__*/React.createElement(Value, null, displayValue(value))));\n};\nfunction isIterable(x) {\n  return Symbol.iterator in x;\n}\nfunction Explorer(_ref4) {\n  let {\n    value,\n    defaultExpanded,\n    renderer = DefaultRenderer,\n    pageSize = 100,\n    copyable = false,\n    ...rest\n  } = _ref4;\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded));\n  const toggleExpanded = React.useCallback(() => setExpanded(old => !old), []);\n  let type = typeof value;\n  let subEntries = [];\n  const makeProperty = sub => {\n    const subDefaultExpanded = defaultExpanded === true ? {\n      [sub.label]: true\n    } : defaultExpanded == null ? void 0 : defaultExpanded[sub.label];\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded\n    };\n  };\n  if (Array.isArray(value)) {\n    type = 'array';\n    subEntries = value.map((d, i) => makeProperty({\n      label: i.toString(),\n      value: d\n    }));\n  } else if (value !== null && typeof value === 'object' && isIterable(value) && typeof value[Symbol.iterator] === 'function') {\n    type = 'Iterable';\n    subEntries = Array.from(value, (val, i) => makeProperty({\n      label: i.toString(),\n      value: val\n    }));\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object';\n    subEntries = Object.entries(value).map(_ref5 => {\n      let [key, val] = _ref5;\n      return makeProperty({\n        label: key,\n        value: val\n      });\n    });\n  }\n  const subEntryPages = chunkArray(subEntries, pageSize);\n  return renderer({\n    handleEntry: entry => /*#__PURE__*/React.createElement(Explorer, _extends({\n      key: entry.label,\n      value: value,\n      renderer: renderer,\n      copyable: copyable\n    }, rest, entry)),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest\n  });\n}\nexport { CopyButton, DefaultRenderer, Entry, ExpandButton, Expander, Info, Label, LabelButton, SubEntries, Value, chunkArray, Explorer as default };","map":{"version":3,"sources":["../../src/Explorer.tsx"],"names":["fontFamily","fontSize","lineHeight","outline","wordBreak","color","cursor","font","background","border","padding","value","navigator","setTimeout","console","marginLeft","paddingLeft","borderLeft","style","display","transition","transform","alignItems","position","top","verticalAlign","result","subEntries","subEntryPages","expanded","copyable","pageSize","renderer","defaultExpanded","type","label","handleEntry"],"mappings":"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","sourcesContent":["'use client'\nimport * as React from 'react'\n\nimport { displayValue, styled } from './utils'\nimport superjson from 'superjson'\n\nexport const Entry = styled('div', {\n  fontFamily: 'Menlo, monospace',\n  fontSize: '1em',\n  lineHeight: '1.7',\n  outline: 'none',\n  wordBreak: 'break-word',\n})\n\nexport const Label = styled('span', {\n  color: 'white',\n})\n\nexport const LabelButton = styled('button', {\n  cursor: 'pointer',\n  color: 'white',\n})\n\nexport const ExpandButton = styled('button', {\n  cursor: 'pointer',\n  color: 'inherit',\n  font: 'inherit',\n  outline: 'inherit',\n  background: 'transparent',\n  border: 'none',\n  padding: 0,\n})\n\ntype CopyState = 'NoCopy' | 'SuccessCopy' | 'ErrorCopy'\n\nexport const CopyButton = ({ value }: { value: unknown }) => {\n  const [copyState, setCopyState] = React.useState<CopyState>('NoCopy')\n\n  return (\n    <button\n      onClick={\n        copyState === 'NoCopy'\n          ? () => {\n              navigator.clipboard.writeText(superjson.stringify(value)).then(\n                () => {\n                  setCopyState('SuccessCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n                (err) => {\n                  console.error('Failed to copy: ', err)\n                  setCopyState('ErrorCopy')\n                  setTimeout(() => {\n                    setCopyState('NoCopy')\n                  }, 1500)\n                },\n              )\n            }\n          : undefined\n      }\n      style={{\n        cursor: 'pointer',\n        color: 'inherit',\n        font: 'inherit',\n        outline: 'inherit',\n        background: 'transparent',\n        border: 'none',\n        padding: 0,\n      }}\n    >\n      {copyState === 'NoCopy' ? (\n        <Copier />\n      ) : copyState === 'SuccessCopy' ? (\n        <CopiedCopier />\n      ) : (\n        <ErrorCopier />\n      )}\n    </button>\n  )\n}\n\nexport const Value = styled('span', (_props, theme) => ({\n  color: theme.danger,\n}))\n\nexport const SubEntries = styled('div', {\n  marginLeft: '.1em',\n  paddingLeft: '1em',\n  borderLeft: '2px solid rgba(0,0,0,.15)',\n})\n\nexport const Info = styled('span', {\n  color: 'grey',\n  fontSize: '.7em',\n})\n\ntype ExpanderProps = {\n  expanded: boolean\n  style?: React.CSSProperties\n}\n\nexport const Expander = ({ expanded, style = {} }: ExpanderProps) => (\n  <span\n    style={{\n      display: 'inline-block',\n      transition: 'all .1s ease',\n      transform: `rotate(${expanded ? 90 : 0}deg) ${style.transform || ''}`,\n      ...style,\n    }}\n  >\n    ▶\n  </span>\n)\n\nconst Copier = () => (\n  <span\n    aria-label=\"Copy object to clipboard\"\n    title=\"Copy object to clipboard\"\n    style={{\n      paddingLeft: '1em',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\">\n      <path\n        fill=\"currentColor\"\n        d=\"M0 6.75C0 5.784.784 5 1.75 5h1.5a.75.75 0 010 1.5h-1.5a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-1.5a.75.75 0 011.5 0v1.5A1.75 1.75 0 019.25 16h-7.5A1.75 1.75 0 010 14.25v-7.5z\"\n      ></path>\n      <path\n        fill=\"currentColor\"\n        d=\"M5 1.75C5 .784 5.784 0 6.75 0h7.5C15.216 0 16 .784 16 1.75v7.5A1.75 1.75 0 0114.25 11h-7.5A1.75 1.75 0 015 9.25v-7.5zm1.75-.25a.25.25 0 00-.25.25v7.5c0 .138.112.25.25.25h7.5a.25.25 0 00.25-.25v-7.5a.25.25 0 00-.25-.25h-7.5z\"\n      ></path>\n    </svg>\n  </span>\n)\n\nconst ErrorCopier = () => (\n  <span\n    aria-label=\"Failed copying to clipboard\"\n    title=\"Failed copying to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'flex',\n      alignItems: 'center',\n    }}\n  >\n    <svg height=\"12\" viewBox=\"0 0 16 12\" width=\"10\" display=\"block\">\n      <path\n        fill=\"red\"\n        d=\"M3.72 3.72a.75.75 0 011.06 0L8 6.94l3.22-3.22a.75.75 0 111.06 1.06L9.06 8l3.22 3.22a.75.75 0 11-1.06 1.06L8 9.06l-3.22 3.22a.75.75 0 01-1.06-1.06L6.94 8 3.72 4.78a.75.75 0 010-1.06z\"\n      ></path>\n    </svg>\n    <span\n      style={{\n        color: 'red',\n        fontSize: '12px',\n        paddingLeft: '4px',\n        position: 'relative',\n        top: '2px',\n      }}\n    >\n      See console\n    </span>\n  </span>\n)\n\nconst CopiedCopier = () => (\n  <span\n    aria-label=\"Object copied to clipboard\"\n    title=\"Object copied to clipboard\"\n    style={{\n      paddingLeft: '1em',\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    }}\n  >\n    <svg height=\"16\" viewBox=\"0 0 16 16\" width=\"16\" display=\"block\">\n      <path\n        fill=\"green\"\n        d=\"M13.78 4.22a.75.75 0 010 1.06l-7.25 7.25a.75.75 0 01-1.06 0L2.22 9.28a.75.75 0 011.06-1.06L6 10.94l6.72-6.72a.75.75 0 011.06 0z\"\n      ></path>\n    </svg>\n  </span>\n)\n\ntype Entry = {\n  label: string\n}\n\ntype RendererProps = {\n  handleEntry: (entry: Entry) => JSX.Element\n  label?: string\n  value: unknown\n  subEntries: Entry[]\n  subEntryPages: Entry[][]\n  type: string\n  expanded: boolean\n  copyable: boolean\n  toggleExpanded: () => void\n  pageSize: number\n}\n\n/**\n * Chunk elements in the array by size\n *\n * when the array cannot be chunked evenly by size, the last chunk will be\n * filled with the remaining elements\n *\n * @example\n * chunkArray(['a','b', 'c', 'd', 'e'], 2) // returns [['a','b'], ['c', 'd'], ['e']]\n */\nexport function chunkArray<T>(array: T[], size: number): T[][] {\n  if (size < 1) return []\n  let i = 0\n  const result: T[][] = []\n  while (i < array.length) {\n    result.push(array.slice(i, i + size))\n    i = i + size\n  }\n  return result\n}\n\ntype Renderer = (props: RendererProps) => JSX.Element\n\nexport const DefaultRenderer: Renderer = ({\n  handleEntry,\n  label,\n  value,\n  subEntries = [],\n  subEntryPages = [],\n  type,\n  expanded = false,\n  copyable = false,\n  toggleExpanded,\n  pageSize,\n}) => {\n  const [expandedPages, setExpandedPages] = React.useState<number[]>([])\n\n  return (\n    <Entry key={label}>\n      {subEntryPages.length ? (\n        <>\n          <ExpandButton onClick={() => toggleExpanded()}>\n            <Expander expanded={expanded} /> {label}{' '}\n            <Info>\n              {String(type).toLowerCase() === 'iterable' ? '(Iterable) ' : ''}\n              {subEntries.length} {subEntries.length > 1 ? `items` : `item`}\n            </Info>\n          </ExpandButton>\n          {copyable ? <CopyButton value={value} /> : null}\n          {expanded ? (\n            subEntryPages.length === 1 ? (\n              <SubEntries>{subEntries.map(handleEntry)}</SubEntries>\n            ) : (\n              <SubEntries>\n                {subEntryPages.map((entries, index) => (\n                  <div key={index}>\n                    <Entry>\n                      <LabelButton\n                        onClick={() =>\n                          setExpandedPages((old) =>\n                            old.includes(index)\n                              ? old.filter((d) => d !== index)\n                              : [...old, index],\n                          )\n                        }\n                      >\n                        <Expander expanded={expanded} /> [{index * pageSize} ...{' '}\n                        {index * pageSize + pageSize - 1}]\n                      </LabelButton>\n                      {expandedPages.includes(index) ? (\n                        <SubEntries>{entries.map(handleEntry)}</SubEntries>\n                      ) : null}\n                    </Entry>\n                  </div>\n                ))}\n              </SubEntries>\n            )\n          ) : null}\n        </>\n      ) : (\n        <>\n          <Label>{label}:</Label> <Value>{displayValue(value)}</Value>\n        </>\n      )}\n    </Entry>\n  )\n}\n\ntype ExplorerProps = Partial<RendererProps> & {\n  renderer?: Renderer\n  defaultExpanded?: true | Record<string, boolean>\n  copyable?: boolean\n}\n\ntype Property = {\n  defaultExpanded?: boolean | Record<string, boolean>\n  label: string\n  value: unknown\n}\n\nfunction isIterable(x: any): x is Iterable<unknown> {\n  return Symbol.iterator in x\n}\n\nexport default function Explorer({\n  value,\n  defaultExpanded,\n  renderer = DefaultRenderer,\n  pageSize = 100,\n  copyable = false,\n  ...rest\n}: ExplorerProps) {\n  const [expanded, setExpanded] = React.useState(Boolean(defaultExpanded))\n  const toggleExpanded = React.useCallback(() => setExpanded((old) => !old), [])\n\n  let type: string = typeof value\n  let subEntries: Property[] = []\n\n  const makeProperty = (sub: { label: string; value: unknown }): Property => {\n    const subDefaultExpanded =\n      defaultExpanded === true\n        ? { [sub.label]: true }\n        : defaultExpanded?.[sub.label]\n    return {\n      ...sub,\n      defaultExpanded: subDefaultExpanded,\n    }\n  }\n\n  if (Array.isArray(value)) {\n    type = 'array'\n    subEntries = value.map((d, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: d,\n      }),\n    )\n  } else if (\n    value !== null &&\n    typeof value === 'object' &&\n    isIterable(value) &&\n    typeof value[Symbol.iterator] === 'function'\n  ) {\n    type = 'Iterable'\n    subEntries = Array.from(value, (val, i) =>\n      makeProperty({\n        label: i.toString(),\n        value: val,\n      }),\n    )\n  } else if (typeof value === 'object' && value !== null) {\n    type = 'object'\n    subEntries = Object.entries(value).map(([key, val]) =>\n      makeProperty({\n        label: key,\n        value: val,\n      }),\n    )\n  }\n\n  const subEntryPages = chunkArray(subEntries, pageSize)\n\n  return renderer({\n    handleEntry: (entry) => (\n      <Explorer\n        key={entry.label}\n        value={value}\n        renderer={renderer}\n        copyable={copyable}\n        {...rest}\n        {...entry}\n      />\n    ),\n    type,\n    subEntries,\n    subEntryPages,\n    value,\n    expanded,\n    copyable,\n    toggleExpanded,\n    pageSize,\n    ...rest,\n  })\n}\n"]},"metadata":{},"sourceType":"module"}