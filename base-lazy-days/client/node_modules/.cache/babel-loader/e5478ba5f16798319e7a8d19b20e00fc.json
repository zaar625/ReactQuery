{"ast":null,"code":"import { defaultLogger } from './logger.esm.js';\nimport { notifyManager } from './notifyManager.esm.js';\nimport { Removable } from './removable.esm.js';\nimport { createRetryer, canFetch } from './retryer.esm.js';\n\n// CLASS\nclass Mutation extends Removable {\n  constructor(config) {\n    super();\n    this.defaultOptions = config.defaultOptions;\n    this.mutationId = config.mutationId;\n    this.mutationCache = config.mutationCache;\n    this.logger = config.logger || defaultLogger;\n    this.observers = [];\n    this.state = config.state || getDefaultState();\n    this.setOptions(config.options);\n    this.scheduleGc();\n  }\n  setOptions(options) {\n    this.options = {\n      ...this.defaultOptions,\n      ...options\n    };\n    this.updateCacheTime(this.options.cacheTime);\n  }\n  get meta() {\n    return this.options.meta;\n  }\n  setState(state) {\n    this.dispatch({\n      type: 'setState',\n      state\n    });\n  }\n  addObserver(observer) {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer); // Stop the mutation from being garbage collected\n\n      this.clearGcTimeout();\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer\n      });\n    }\n  }\n  removeObserver(observer) {\n    this.observers = this.observers.filter(x => x !== observer);\n    this.scheduleGc();\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer\n    });\n  }\n  optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc();\n      } else {\n        this.mutationCache.remove(this);\n      }\n    }\n  }\n  continue() {\n    var _this$retryer$continu, _this$retryer;\n    return (_this$retryer$continu = (_this$retryer = this.retryer) == null ? void 0 : _this$retryer.continue()) != null ? _this$retryer$continu : this.execute();\n  }\n  async execute() {\n    const executeMutation = () => {\n      var _this$options$retry;\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found');\n          }\n          return this.options.mutationFn(this.state.variables);\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({\n            type: 'failed',\n            failureCount,\n            error\n          });\n        },\n        onPause: () => {\n          this.dispatch({\n            type: 'pause'\n          });\n        },\n        onContinue: () => {\n          this.dispatch({\n            type: 'continue'\n          });\n        },\n        retry: (_this$options$retry = this.options.retry) != null ? _this$options$retry : 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode\n      });\n      return this.retryer.promise;\n    };\n    const restored = this.state.status === 'loading';\n    try {\n      var _this$mutationCache$c3, _this$mutationCache$c4, _this$options$onSucce, _this$options2, _this$mutationCache$c5, _this$mutationCache$c6, _this$options$onSettl, _this$options3;\n      if (!restored) {\n        var _this$mutationCache$c, _this$mutationCache$c2, _this$options$onMutat, _this$options;\n        this.dispatch({\n          type: 'loading',\n          variables: this.options.variables\n        }); // Notify cache callback\n\n        await ((_this$mutationCache$c = (_this$mutationCache$c2 = this.mutationCache.config).onMutate) == null ? void 0 : _this$mutationCache$c.call(_this$mutationCache$c2, this.state.variables, this));\n        const context = await ((_this$options$onMutat = (_this$options = this.options).onMutate) == null ? void 0 : _this$options$onMutat.call(_this$options, this.state.variables));\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables\n          });\n        }\n      }\n      const data = await executeMutation(); // Notify cache callback\n\n      await ((_this$mutationCache$c3 = (_this$mutationCache$c4 = this.mutationCache.config).onSuccess) == null ? void 0 : _this$mutationCache$c3.call(_this$mutationCache$c4, data, this.state.variables, this.state.context, this));\n      await ((_this$options$onSucce = (_this$options2 = this.options).onSuccess) == null ? void 0 : _this$options$onSucce.call(_this$options2, data, this.state.variables, this.state.context)); // Notify cache callback\n\n      await ((_this$mutationCache$c5 = (_this$mutationCache$c6 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c5.call(_this$mutationCache$c6, data, null, this.state.variables, this.state.context, this));\n      await ((_this$options$onSettl = (_this$options3 = this.options).onSettled) == null ? void 0 : _this$options$onSettl.call(_this$options3, data, null, this.state.variables, this.state.context));\n      this.dispatch({\n        type: 'success',\n        data\n      });\n      return data;\n    } catch (error) {\n      try {\n        var _this$mutationCache$c7, _this$mutationCache$c8, _this$options$onError, _this$options4, _this$mutationCache$c9, _this$mutationCache$c10, _this$options$onSettl2, _this$options5;\n\n        // Notify cache callback\n        await ((_this$mutationCache$c7 = (_this$mutationCache$c8 = this.mutationCache.config).onError) == null ? void 0 : _this$mutationCache$c7.call(_this$mutationCache$c8, error, this.state.variables, this.state.context, this));\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error);\n        }\n        await ((_this$options$onError = (_this$options4 = this.options).onError) == null ? void 0 : _this$options$onError.call(_this$options4, error, this.state.variables, this.state.context)); // Notify cache callback\n\n        await ((_this$mutationCache$c9 = (_this$mutationCache$c10 = this.mutationCache.config).onSettled) == null ? void 0 : _this$mutationCache$c9.call(_this$mutationCache$c10, undefined, error, this.state.variables, this.state.context, this));\n        await ((_this$options$onSettl2 = (_this$options5 = this.options).onSettled) == null ? void 0 : _this$options$onSettl2.call(_this$options5, undefined, error, this.state.variables, this.state.context));\n        throw error;\n      } finally {\n        this.dispatch({\n          type: 'error',\n          error: error\n        });\n      }\n    }\n  }\n  dispatch(action) {\n    const reducer = state => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error\n          };\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true\n          };\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false\n          };\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables\n          };\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false\n          };\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error'\n          };\n        case 'setState':\n          return {\n            ...state,\n            ...action.state\n          };\n      }\n    };\n    this.state = reducer(this.state);\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action);\n      });\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action\n      });\n    });\n  }\n}\nfunction getDefaultState() {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined\n  };\n}\nexport { Mutation, getDefaultState };","map":{"version":3,"sources":["../../src/mutation.ts"],"names":["Mutation","Removable","constructor","config","defaultOptions","mutationId","mutationCache","logger","defaultLogger","observers","state","getDefaultState","setOptions","options","scheduleGc","updateCacheTime","cacheTime","meta","setState","dispatch","type","addObserver","observer","includes","push","clearGcTimeout","notify","mutation","removeObserver","filter","x","optionalRemove","length","status","remove","continue","retryer","execute","executeMutation","createRetryer","fn","mutationFn","Promise","reject","variables","onFail","failureCount","error","onPause","onContinue","retry","retryDelay","networkMode","promise","restored","onMutate","context","data","onSuccess","onSettled","onError","process","env","NODE_ENV","undefined","action","reducer","failureReason","isPaused","canFetch","notifyManager","batch","forEach","onMutationUpdate"],"mappings":"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","sourcesContent":["import type { MutationOptions, MutationStatus, MutationMeta } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport type { Logger } from './logger'\nimport { defaultLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Removable } from './removable'\nimport type { Retryer } from './retryer'\nimport { canFetch, createRetryer } from './retryer'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  logger?: Logger\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n  meta?: MutationMeta\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  failureReason: TError | null\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction<TError> {\n  type: 'failed'\n  failureCount: number\n  error: TError | null\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction<TError>\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown,\n> extends Removable {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options!: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  private mutationCache: MutationCache\n  private logger: Logger\n  private retryer?: Retryer<TData>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    super()\n\n    this.defaultOptions = config.defaultOptions\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.logger = config.logger || defaultLogger\n    this.observers = []\n    this.state = config.state || getDefaultState()\n\n    this.setOptions(config.options)\n    this.scheduleGc()\n  }\n\n  setOptions(\n    options?: MutationOptions<TData, TError, TVariables, TContext>,\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    this.updateCacheTime(this.options.cacheTime)\n  }\n\n  get meta(): MutationMeta | undefined {\n    return this.options.meta\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (!this.observers.includes(observer)) {\n      this.observers.push(observer)\n\n      // Stop the mutation from being garbage collected\n      this.clearGcTimeout()\n\n      this.mutationCache.notify({\n        type: 'observerAdded',\n        mutation: this,\n        observer,\n      })\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter((x) => x !== observer)\n\n    this.scheduleGc()\n\n    this.mutationCache.notify({\n      type: 'observerRemoved',\n      mutation: this,\n      observer,\n    })\n  }\n\n  protected optionalRemove() {\n    if (!this.observers.length) {\n      if (this.state.status === 'loading') {\n        this.scheduleGc()\n      } else {\n        this.mutationCache.remove(this)\n      }\n    }\n  }\n\n  continue(): Promise<unknown> {\n    return this.retryer?.continue() ?? this.execute()\n  }\n\n  async execute(): Promise<TData> {\n    const executeMutation = () => {\n      this.retryer = createRetryer({\n        fn: () => {\n          if (!this.options.mutationFn) {\n            return Promise.reject('No mutationFn found')\n          }\n          return this.options.mutationFn(this.state.variables!)\n        },\n        onFail: (failureCount, error) => {\n          this.dispatch({ type: 'failed', failureCount, error })\n        },\n        onPause: () => {\n          this.dispatch({ type: 'pause' })\n        },\n        onContinue: () => {\n          this.dispatch({ type: 'continue' })\n        },\n        retry: this.options.retry ?? 0,\n        retryDelay: this.options.retryDelay,\n        networkMode: this.options.networkMode,\n      })\n\n      return this.retryer.promise\n    }\n\n    const restored = this.state.status === 'loading'\n    try {\n      if (!restored) {\n        this.dispatch({ type: 'loading', variables: this.options.variables! })\n        // Notify cache callback\n        await this.mutationCache.config.onMutate?.(\n          this.state.variables,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n        const context = await this.options.onMutate?.(this.state.variables!)\n        if (context !== this.state.context) {\n          this.dispatch({\n            type: 'loading',\n            context,\n            variables: this.state.variables,\n          })\n        }\n      }\n      const data = await executeMutation()\n\n      // Notify cache callback\n      await this.mutationCache.config.onSuccess?.(\n        data,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSuccess?.(\n        data,\n        this.state.variables!,\n        this.state.context!,\n      )\n\n      // Notify cache callback\n      await this.mutationCache.config.onSettled?.(\n        data,\n        null,\n        this.state.variables,\n        this.state.context,\n        this as Mutation<unknown, unknown, unknown, unknown>,\n      )\n\n      await this.options.onSettled?.(\n        data,\n        null,\n        this.state.variables!,\n        this.state.context,\n      )\n\n      this.dispatch({ type: 'success', data })\n      return data\n    } catch (error) {\n      try {\n        // Notify cache callback\n        await this.mutationCache.config.onError?.(\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        if (process.env.NODE_ENV !== 'production') {\n          this.logger.error(error)\n        }\n\n        await this.options.onError?.(\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n\n        // Notify cache callback\n        await this.mutationCache.config.onSettled?.(\n          undefined,\n          error,\n          this.state.variables,\n          this.state.context,\n          this as Mutation<unknown, unknown, unknown, unknown>,\n        )\n\n        await this.options.onSettled?.(\n          undefined,\n          error as TError,\n          this.state.variables!,\n          this.state.context,\n        )\n        throw error\n      } finally {\n        this.dispatch({ type: 'error', error: error as TError })\n      }\n    }\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    const reducer = (\n      state: MutationState<TData, TError, TVariables, TContext>,\n    ): MutationState<TData, TError, TVariables, TContext> => {\n      switch (action.type) {\n        case 'failed':\n          return {\n            ...state,\n            failureCount: action.failureCount,\n            failureReason: action.error,\n          }\n        case 'pause':\n          return {\n            ...state,\n            isPaused: true,\n          }\n        case 'continue':\n          return {\n            ...state,\n            isPaused: false,\n          }\n        case 'loading':\n          return {\n            ...state,\n            context: action.context,\n            data: undefined,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            isPaused: !canFetch(this.options.networkMode),\n            status: 'loading',\n            variables: action.variables,\n          }\n        case 'success':\n          return {\n            ...state,\n            data: action.data,\n            failureCount: 0,\n            failureReason: null,\n            error: null,\n            status: 'success',\n            isPaused: false,\n          }\n        case 'error':\n          return {\n            ...state,\n            data: undefined,\n            error: action.error,\n            failureCount: state.failureCount + 1,\n            failureReason: action.error,\n            isPaused: false,\n            status: 'error',\n          }\n        case 'setState':\n          return {\n            ...state,\n            ...action.state,\n          }\n      }\n    }\n    this.state = reducer(this.state)\n\n    notifyManager.batch(() => {\n      this.observers.forEach((observer) => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify({\n        mutation: this,\n        type: 'updated',\n        action,\n      })\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext,\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    failureReason: null,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n"]},"metadata":{},"sourceType":"module"}